<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dachi's Blog 达迟的博客</title>
    <description>Dachi's Personal Blog.</description>
    <link>http://dachicj.com/</link>
    <atom:link href="http://dachicj.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 22 Oct 2017 23:10:32 +0800</pubDate>
    <lastBuildDate>Sun, 22 Oct 2017 23:10:32 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>2017-10-2 技术学习笔记</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;学习材料&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://hacks.mozilla.org/2017/08/inside-a-super-fast-css-engine-quantum-css-aka-stylo/&quot;&gt;https://hacks.mozilla.org/2017/08/inside-a-super-fast-css-engine-quantum-css-aka-stylo/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/&quot;&gt;https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这周暂时放下CSS In Depth的学习，因为看到了来自Firefox浏览器工程师团队的两篇文章，觉得真的很不错，即介绍了火狐下一代浏览器内核的实现，又介绍了浏览器的工作流程，建议前端同学都可以看看（虽然是英文的，但是有很多图片，有助于阅读理解),可以加深对浏览器机制的理解。&lt;/p&gt;

&lt;h2 id=&quot;part-1-quantum-css&quot;&gt;Part 1 Quantum CSS&lt;/h2&gt;

&lt;h3 id=&quot;quantum-css&quot;&gt;Quantum CSS简介&lt;/h3&gt;
&lt;p&gt;Quantum，也就是下一代火狐浏览器的内核，大致由Quantum DOM, Quantum CSS, Quantom Compositor, Quantum Render几个部分组成，其中，Quantum CSS和Quantum Render是解析、渲染网页最为核心的部分，学习材料里的第一个首先介绍了Quantum CSS， 作者首先介绍了Quantum CSS快速的几个原因&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Parallel computing: 平行计算, Quantum CSS新技术&lt;/li&gt;
  &lt;li&gt;Rule tree: Firefox原有技术，具体内容尚不明&lt;/li&gt;
  &lt;li&gt;Style sharing cache: 来自Chrome和Safari,估计是来自WebKit的技术。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;css&quot;&gt;CSS引擎的职责&lt;/h3&gt;
&lt;p&gt;CSS引擎是浏览器渲染引擎的一部分，渲染引擎的工作就是把前端工程师辛辛苦苦写好的HTML &amp;amp; CSS转化为屏幕上的每一个像素,那么这个转化的过程可以大致分为五个步骤。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;解析：将HTML解析为DOM(Document Object Model)，这是一个网页在内存中的虚拟对象，在React等技术出现前，以前的前端程序员都要依靠操作DOM来动态的改变网页的结构,这一步决定网页里应该有什么元素（标题，文字，按钮，等等等等)&lt;/li&gt;
  &lt;li&gt;样式: 计算出每个DOM中元素的样式应该是什么样的，每一个元素应该长成什么样子。&lt;/li&gt;
  &lt;li&gt;布局: 前端程序员肯定熟悉Box模型，在这一个步骤里，渲染引擎将计算出每一个元素自身的盒模型(Box)的尺寸和位置。&lt;/li&gt;
  &lt;li&gt;绘制：绘制各元素的Box, 绘制的过程可以发生在很多图层，这样使得修改一个图层而不影响其他图层变的可能。（在渲染过程中图层代表什么目前笔者尚不明确。)&lt;/li&gt;
  &lt;li&gt;组合：对各个图层应用某些特定属性(比如CSS transforms)，将所有图层组合在一起并呈现到显示器上。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;css-1&quot;&gt;CSS引擎具体工作流程&lt;/h3&gt;
&lt;p&gt;当开始计算样式前，CSS引擎已经拥有了&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;DOM树&lt;/li&gt;
  &lt;li&gt;样式规则列表
CSS引擎会遍历每一个DOM节点，计算出该节点的样式，计算出这个节点的&lt;strong&gt;每一个&lt;/strong&gt;CSS属性的值，即使stylesheet没有设置这个属性。为了完成这项工作，CSS引擎需要&lt;/li&gt;
  &lt;li&gt;selector matching: 寻找那些设置了值的样式属性&lt;/li&gt;
  &lt;li&gt;cascade: 找不到设定的属性，就寻找继承或者默认的属性, 这部分的相关内容可以在上上篇博文里找到:)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;selector-matching&quot;&gt;Selector matching&lt;/h3&gt;
&lt;p&gt;CSS引擎会对照样式表，将对应DOM节点的样式加载到一个列表上，由于一个CSS属性可以match多个值，所以需要根据优先级规则来决定某个id/class/tag的样式应该应用哪一个值,这个规则的设定也可以参考CSS In Depth第一章的学习笔记。&lt;/p&gt;

&lt;h3 id=&quot;cascade&quot;&gt;Cascade&lt;/h3&gt;
&lt;p&gt;当完成了selector matching后，某个id/class/tag对应的DOM node的样式仍然存在空缺，这时候需要寻找该属性的继承或者默认值，这样每一个DOM node的全部CSS属性就完成了计算。&lt;/p&gt;

&lt;h3 id=&quot;style-struct-sharing&quot;&gt;Style struct sharing&lt;/h3&gt;
&lt;p&gt;上面的文字存在一定误导成分啊哈，CSS总共有几百个属性，如果都要计算的话那估计很快就内存不足了，CSS引擎讲将这些值存储到一个叫style struct的对象里，这样DOM节点的样式可能指针指到这些对象上，拥有相似属性的DOM节点（比如兄弟节点）可以将样式都指到相同的style struct上；很多时候父节点会让很多子节点继承属性，他们之间也可以共享style struct。&lt;/p&gt;

&lt;h3 id=&quot;quantum-css-1&quot;&gt;Quantum CSS是如何优化上述过程的&lt;/h3&gt;
&lt;p&gt;我知道写到快干货的地方停了不太合适，不过后面篇幅有点长，等下周继续学习更新吧…Zzzzzz…&lt;/p&gt;

</description>
        <pubDate>Sun, 22 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2017/10/22/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://dachicj.com/2017/10/22/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>2017-10-15 前端学习笔记</title>
        <description>&lt;h3 id=&quot;css-in-depth-chapter-01--02&quot;&gt;学习材料： CSS In Depth Chapter 01 &amp;amp; 02&lt;/h3&gt;

&lt;h2 id=&quot;chapter-01&quot;&gt;Chapter 01&lt;/h2&gt;

&lt;h3 id=&quot;shorthand&quot;&gt;1.4 Shorthand&lt;/h3&gt;

&lt;h4 id=&quot;font--fontinitial-value-&quot;&gt;font:  会将font相关的属性都设置为initial value(默认值), 比如&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.title {
  font: 32px Helvetica, Arial, sans-serif; # 会将font-weight设为normal
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;padding-paddingtop-right-bottom-left-paddingtoppadding-leftpaddingrightpadding&quot;&gt;padding: 设置padding的顺序分别为top, right, bottom, left（顺时针), 如果底部的padding缺失，会使用top的padding, 如果left的padding缺失会使用right的padding.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.example {
	padding: 1px 1px 1px 1px; # 完整
	padding: 1px 2px 1px; # 等于1px 2px 1px 2px;
	padding: 1px 2px; # 等于1px 2px 1px 2px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;background-position-box-shadow-text-shadow--horizontalvertical&quot;&gt;background-position, box-shadow, text-shadow: 这几个属性只有两个方向, 横向(horizontal)和纵向(vertical)&lt;/h4&gt;

&lt;h2 id=&quot;chapter-02-working-with-relative-units&quot;&gt;Chapter 02 Working with relative units&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;第二章主要讲解&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;使用相对单位时的种种变化&lt;/li&gt;
  &lt;li&gt;理解ems和rems,并且不被整疯&lt;/li&gt;
  &lt;li&gt;使用viewport相关单位&lt;/li&gt;
  &lt;li&gt;CSS变量&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;绝对单位和相对单位&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;绝对单位:比如5px就是绝对单位&lt;/li&gt;
  &lt;li&gt;相对单位: em和rem是相对单位，在不同的设备上含义不同&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;powerful&quot;&gt;2.1 相对单位很大力(Powerful)&lt;/h3&gt;
&lt;p&gt;早起的程序开发，程序员面对的都是一成不变的屏幕尺寸，比如一个程序的窗口就是确切的400*300像素，Web时代时，情况有所变化，因为浏览器的窗口会变化，每一次浏览器尺寸的变化，都需要重新计算和引用CSS值才能重新渲染页面，在很长一段时间内，网页设计师都追求”完美像素”风格的设计，他们会创建一个800像素左右宽的容器，然后在里面搞事情，这种设计有点像以前的桌面开发。&lt;/p&gt;

&lt;p&gt;但是随着显示器分辨率的提高（800-&amp;gt;1024-&amp;gt;1280)，这种Pixel-Perfect的开发方式不灵了，然后没几年智能手机又来了，所以设计师需要停止“所有用户都能获得完全一致的使用体验”这种幻觉，这种固定像素尺寸的设计也将被舍弃了。顺应时代的潮流CSS也提出了新的抽象，那就是相对单位。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CSS的各种单位，除了最广为人知的pixel,CSS还有mm(millimeter), cm(entimeter),in(inch),pt(point)，pc(pica) (*笔者注:我从来都用过这些), 这些单位的转换关系是1inch = 25.4mm =2.54cm =6pica = 72pt =96px&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 15 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2017/10/15/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://dachicj.com/2017/10/15/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>2017-09-24 本周前端学习笔记</title>
        <description>&lt;h3 id=&quot;css-in-depth-chapter-01&quot;&gt;学习材料： CSS In Depth Chapter 01&lt;/h3&gt;

&lt;p&gt;本周继续学习CSS In Depth第一章的剩余部分&lt;/p&gt;

&lt;h3 id=&quot;inheritance&quot;&gt;1.2 Inheritance&lt;/h3&gt;
&lt;p&gt; 
当一个元素没有设置的样式，它将从它的母元素获得样式。
注意inheritance和此前讨论的cascade概念并不相同，也并不是
所有的样式都会被继承，被继承的属性包括:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;字体类属性: color, font, font-family, font-size, font-weight, font-variant等&lt;/li&gt;
  &lt;li&gt;列表类属性: list-style, list-style-type, list-style-position,list-style-image&lt;/li&gt;
  &lt;li&gt;表格边框属性: border-collapse, border-spacing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;inherit--initial&quot;&gt;1.3 Inherit &amp;amp; Initial&lt;/h3&gt;
&lt;p&gt;有两种特殊的CSS值可以应用到任何CSS属性上, inherit和initial.
 &lt;/p&gt;
&lt;h4 id=&quot;inherit&quot;&gt;inherit&lt;/h4&gt;
&lt;p&gt;有时你希望某个元素可以继承母元素的样式而不是使用默认定义的样式，那就是
使用inherit的时候.
 &lt;/p&gt;
&lt;h4 id=&quot;initial&quot;&gt;initial&lt;/h4&gt;
&lt;p&gt;有时候你想取消某些元素的样式，你可以使用initial这个值，使得某个属性被设定为默认的属性，比如&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;footer {
 color: initial;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;等价于&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;footer {
 color: black;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;有时initial值对于某些属性并不起作用，是因为这些属性没有默认值，比如border-width或者padding, 但是赋予他们initial的值完全合法。&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2017/09/24/%E6%9C%AC%E5%91%A8%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://dachicj.com/2017/09/24/%E6%9C%AC%E5%91%A8%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>2017-09-17 本周前端学习笔记</title>
        <description>&lt;h3 id=&quot;css-in-depth-chapter-01&quot;&gt;学习材料： CSS In Depth Chapter 01&lt;/h3&gt;

&lt;p&gt;因为一直想要巩固CSS基础和对于CSS的理解，碰巧找到了一本不错的书&lt;a href=&quot;https://www.manning.com/books/css-in-depth&quot;&gt;CSS In Depth&lt;/a&gt;, 本周阅读了其免费的第一章
 &lt;/p&gt;
&lt;h3 id=&quot;chatper-01-cascade-specificity-inheritance&quot;&gt;Chatper 01 Cascade(瀑布流), Specificity(特选性）, Inheritance(继承)&lt;/h3&gt;
&lt;p&gt;我一直都很好奇CSS的Cascade（字面意义是瀑布)是什么意思, 为什么要用瀑布来形容样式? 在看过这一章后，我对Cascade的理解就是，同一个元素可以应用多种样式(甚至是冲突的样式)，而CSS要根据几个原则来解决冲突使得某个元素的样式可以从最宽泛的设置一直滑落到最适合它的范围(嗯，我知道这么强行解释有些尴尬不过CSS的创始人是&lt;a href=&quot;http://www.wiumlie.no/2006/phd/#cascading&quot;&gt;这么说&lt;/a&gt;的所以你们就忍了吧)&lt;/p&gt;

&lt;p&gt;好的，那么我们来看看当一个元素被应用了多种样式后应该如何解决样式的合并和冲突。&lt;/p&gt;

&lt;h3 id=&quot;css&quot;&gt;0.如何解决CSS的冲突&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;来源： 样式从何而来 (higher priority origin)&lt;/li&gt;
  &lt;li&gt;范围： 是否有inline样式 (应用inline样式)&lt;/li&gt;
  &lt;li&gt;选择器：选择元素的精细程度（higer specificity)&lt;/li&gt;
  &lt;li&gt;顺序： 样式定义顺序 (later in source order)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;origin&quot;&gt;1.origin&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;用户设置的!important样式&lt;/li&gt;
  &lt;li&gt;用户设置的样式&lt;/li&gt;
  &lt;li&gt;浏览器默认样式&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;inline-scope&quot;&gt;2.inline scope&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a style='color:red;'&amp;gt;Link&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;注意,加了important的inline style无人能压制&lt;/p&gt;

&lt;h3 id=&quot;selector-specificity&quot;&gt;3.selector specificity&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;规则: 更多的ids &amp;gt; 更多的classes &amp;gt; 更多的tags&lt;/li&gt;
  &lt;li&gt;每一个元素的选择器都可以写成这样[id数量，class数量，tags数量]&lt;/li&gt;
  &lt;li&gt;当你给元素一个id时，如何覆盖这个id的样式:
    &lt;ul&gt;
      &lt;li&gt;新样式加入important&lt;/li&gt;
      &lt;li&gt;新样式加上id和class&lt;/li&gt;
      &lt;li&gt;原样式的id降级为class&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section&quot;&gt;4.顺序这个就不用说了吧,后来者居上&lt;/h3&gt;

&lt;h3 id=&quot;section-1&quot;&gt;5.一点来自作者的建议&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;不要用id, 很难覆盖&lt;/li&gt;
  &lt;li&gt;不要用important, 很难覆盖&lt;/li&gt;
  &lt;li&gt;如果你在写一个库给别人用的话，不要用inline style, 否则用你库的人根本没法覆盖这个样式
 
 &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 17 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2017/09/17/%E6%9C%AC%E5%91%A8%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://dachicj.com/2017/09/17/%E6%9C%AC%E5%91%A8%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>本周JS学习笔记</title>
        <description>&lt;h3 id=&quot;yon-dont-know-jstype--grammer-chapter-01&quot;&gt;学习材料： Yon don’t know JS(Type &amp;amp; Grammer) Chapter 01&lt;/h3&gt;

&lt;h2 id=&quot;section&quot;&gt;什么是类型&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;An intrinsic, built-in set of characteristics that uniquely identifies the behavior of a particular value and distinguishes it from other values, both to the engine and to the developer.(对JS引擎和开发者而言的一套拥有内置独特特性和行为的特殊值，并与其他值相区别)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-1&quot;&gt;关键字&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;对JS引擎和开发者：引擎和开发者在处理不同类型时都需要不同的方式。&lt;/li&gt;
  &lt;li&gt;独特特性和行为: 每种类型的值有自己的特性和行为。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;js&quot;&gt;JS内置类型&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;null&lt;/li&gt;
  &lt;li&gt;undefined&lt;/li&gt;
  &lt;li&gt;boolean&lt;/li&gt;
  &lt;li&gt;number&lt;/li&gt;
  &lt;li&gt;string&lt;/li&gt;
  &lt;li&gt;object&lt;/li&gt;
  &lt;li&gt;symbol(ES6新增)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//try this&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//会显示true,但是是不正确的，这个是历史遗留问题&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;function&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//true, 但是function并不是单独的类型，它是callable object, object的一种子类型&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;更安全的检查变量方式&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//假设你的代码通过某个全局变量DEBUG来检查运行环境&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//会throw ReferenceError&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'undefined'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//更安全&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//使用typeof来查看某功能是否存在&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomethingCool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;helper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FeatureXYZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;FeatureXYZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;values-as-types&quot;&gt;Values as Types&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;在JS中，变量不拥有类型，但是values(值)拥有类型，变量可以绑定任意类型&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;coercion-&quot;&gt;Coercion 类型转换&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;类型转换有时是显式的，可读的，有的时候会在不经意间发生。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2017/09/10/%E6%9C%AC%E5%91%A8JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://dachicj.com/2017/09/10/%E6%9C%AC%E5%91%A8JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>学习Webpack</title>
        <description>&lt;h3&gt;Webpack Config&lt;/h3&gt;
&lt;ol&gt;
    &lt;li&gt;入口文件&lt;/li&gt;
    &lt;li&gt;目的地址&lt;/li&gt;
    &lt;li&gt;loader: 用于转换各种文件&lt;/li&gt;
    &lt;li&gt;plugin: 提供各种插件功能&lt;/li&gt;
    &lt;li&gt;externals: 外部设定&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 27 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2016/11/27/Study-Webpack.html</link>
        <guid isPermaLink="true">http://dachicj.com/2016/11/27/Study-Webpack.html</guid>
        
        
      </item>
    
      <item>
        <title>学习Chromium源代码</title>
        <description>&lt;p&gt;
    Chrome是谷歌自家出品的浏览器，Chromium则是Chrome背后的引擎，作为一名想(bu)要(de)学(bu)习(xue)浏览器知识的码农,
    Chromium是非常具有研究价值的对象，不过这个Project极其庞大，我们只能从一些小的方面入手，做一些微小的学习工作。
&lt;/p&gt;

&lt;p&gt;
    在进行具体的学习之前，我们不妨从Chromium的代码结构入手，高屋建瓴地总览一下Chorimium, 这份
    &lt;a href=&quot;https://www.chromium.org/developers/how-tos/getting-around-the-chrome-source-code&quot;&gt;官方文档&lt;/a&gt;
    是一个很好的学习材料。
&lt;/p&gt;

&lt;p&gt;
    Chromium大致可以分为三个部分:
    &lt;ol&gt;
        &lt;li&gt;浏览器,负责所有的UI以及I/O。&lt;/li&gt;
        &lt;li&gt;渲染器,在一般情况下是由浏览器驱动的基于tab的子程序。&lt;/li&gt;
        &lt;li&gt;Webkit,渲染器嵌入了Webkit来进行布局和渲染。&lt;/li&gt;
    &lt;/ol&gt;
&lt;/p&gt;

&lt;p&gt;Chromium架构图:&lt;/p&gt;
&lt;img src=&quot;../../../img/chromium_arch.png&quot;&gt;

&lt;p&gt;
    Chromium由许多个子项目组成，这些项目有:
    &lt;ol&gt;
    &lt;li&gt;android_webview&lt;/li&gt;
    &lt;li&gt;apps&lt;/li&gt;
    &lt;li&gt;base&lt;/li&gt;
    &lt;li&gt;breakpad&lt;/li&gt;
    &lt;li&gt;build&lt;/li&gt;
    &lt;li&gt;cc&lt;/li&gt;
    &lt;li&gt;chrome: Chromium浏览器&lt;/li&gt;
    &lt;li&gt;chrome/test/data&lt;/li&gt;
    &lt;li&gt;components&lt;/li&gt;
    &lt;li&gt;content: 一个多进程沙箱浏览器的核心代码&lt;/li&gt;
    &lt;li&gt;device&lt;/li&gt;
    &lt;li&gt;net&lt;/li&gt;
    &lt;li&gt;sandbox&lt;/li&gt;
    &lt;li&gt;skia&lt;/li&gt;
    &lt;li&gt;sql&lt;/li&gt;
    &lt;li&gt;testing&lt;/li&gt;
    &lt;li&gt;third_party&lt;/li&gt;
    &lt;li&gt;tools&lt;/li&gt;
    &lt;li&gt;ui/gfx&lt;/li&gt;
    &lt;li&gt;ui/views: 一个UI开发的简单框架&lt;/li&gt;
    &lt;li&gt;url: Google的开源URL parsing库&lt;/li&gt;
    &lt;li&gt;v8: V8 JavaScript库&lt;/li&gt;
    &lt;li&gt;webkit: webkit相关代码&lt;/li&gt;
    &lt;/ol&gt;
&lt;/p&gt;

&lt;p&gt;
    缘于Chromium代码架构宏大，绝非一朝一夕能够理解、学习之项目，我将在未来持续地学习这个项目，加深我对浏览器的理解。
&lt;/p&gt;

&lt;p&gt;
    &lt;a href=&quot;https://chromium.googlesource.com/chromium/src.git/+/master&quot;&gt;源码地址&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;a href=&quot;https://www.chromium.org/Home&quot;&gt;延伸阅读&lt;/a&gt;
&lt;/p&gt;

</description>
        <pubDate>Wed, 19 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2016/10/19/Chromium-Code-Structure.html</link>
        <guid isPermaLink="true">http://dachicj.com/2016/10/19/Chromium-Code-Structure.html</guid>
        
        
      </item>
    
      <item>
        <title>学习MySQL体系结构</title>
        <description>&lt;h2&gt;MySQL技术内幕：InnoDB存储引擎大纲&lt;/h2&gt;
&lt;ol&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;MySQL体系结构&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;InnoDB存储引擎&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;文件&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;表&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;索引与算法&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;锁&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;事务&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;备份与恢复&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;性能调优&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;InnoDB存储引擎源代码的编译和调试&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;1.MySQL体系结构&lt;/h3&gt;
&lt;p&gt;数据库(Database)是文件的集合&lt;/p&gt;
&lt;p&gt;示例(Instance)是运行在内存中的示例&lt;/p&gt;
&lt;p&gt;
MySQL组成部分
    &lt;ul&gt;
      &lt;li&gt;连接池组件&lt;/li&gt;
      &lt;li&gt;管理服务和工具组件&lt;/li&gt;
      &lt;li&gt;SQL接口组件&lt;/li&gt;
      &lt;li&gt;查询分析器组件&lt;/li&gt;
      &lt;li&gt;优化器组件&lt;/li&gt;
      &lt;li&gt;缓冲(Cache)组件&lt;/li&gt;
      &lt;li&gt;插件式存储引擎&lt;/li&gt;
      &lt;li&gt;物理文件&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2016/10/12/MySQL_Engine.html</link>
        <guid isPermaLink="true">http://dachicj.com/2016/10/12/MySQL_Engine.html</guid>
        
        
      </item>
    
      <item>
        <title>Python数据结构List/Dict研究</title>
        <description>&lt;p&gt;
    &lt;b&gt;Python的List和Dict数据结构的底层是如何实现的?&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
    如果你曾经也思索过这个问题，或者在面试中被问到过这个问题？如果你是一名Python使用者，或者你是一名C语言程序员，无论如何如果这个问题引起了你的兴趣，
    那么欢迎你今天和我一起探索一下Python(CPython）底层是如何实现这两个数据结构的。
&lt;/p&gt;

&lt;p&gt;
    list和dicts是Python里常用的数据结构, Python程序员的日常工作离不开这两个数据结构，
    不过在list和dict为程序员提供了如此多的便利同时，我们也想了解它们工作时它的底层是如何真正运转的，研究这个问题不仅可以满足我们的好奇心，
    同样也将增进我们对这么语言的理解。
&lt;/p&gt;

&lt;p&gt;
    今天我们的研究材料是Python的CPython实现，是Python使用最广泛的Python解释器，
    其源代码可以在其&lt;a href=&quot;https://github.com/python/cpython/tree/2.7&quot;&gt;Github Repo&lt;/a&gt;上获得。
    而我们今天要学习的部分则位于Include和Objects文件夹下。
&lt;/p&gt;

&lt;p&gt;
    首先是list,让我们先来看看声明list数据结构的listobject.h，打开文件映入眼帘的是
    &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* 类型是名为PyVarObject的struct，其中的属性ob_size是记录了真正的数据的多寡 */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PyObject_VAR_HEAD&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Vector of pointers to list elements.  list[0] is ob_item[0], etc. */&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* ob_item就是指向元素列表的指针。*/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PyObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ob_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* allocated记录着实际请求的内存，这个数目大于实际储存的内存空间
         * 所以有 0 &amp;lt;= ob_size &amp;lt;= allocated
        */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Py_ssize_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyListObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
    再让我们来看看list的各种操作, 在listobject.c里首先定义了一些全局变量
    &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/* Empty list reuse scheme to save calls to malloc and free */&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#ifndef PyList_MAXFREELIST
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define PyList_MAXFREELIST 80
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyListObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;free_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PyList_MAXFREELIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numfree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
    这个free_list数组里面维护的指针所指对的内存才是list里的干货---PyListObject,
    那么这些指针到底指向哪里，list是如何进行初始化和各种操作的呢，我们接着往下看。
&lt;/p&gt;

&lt;h3&gt;
    未完待续...
&lt;/h3&gt;

&lt;p&gt;
    参考书籍：
    &lt;ol&gt;
        &lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/3117898/&quot;&gt;Python源码剖析&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2016/10/07/Study_Python_DS.html</link>
        <guid isPermaLink="true">http://dachicj.com/2016/10/07/Study_Python_DS.html</guid>
        
        
      </item>
    
      <item>
        <title>Python编码问题</title>
        <description>&lt;p&gt;
    那么，今天我们来学习一个非常骨骼精奇的Python知识点：Python的编码问题。
&lt;/p&gt;

&lt;p&gt;
    不知道诸位使用Python2.x的同学们有没有在撸代码的时候遇到过这样的情况
    &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'之乎者也'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;UnicodeEncodeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ascii'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t encode characters in position 0-3: ordinal not in range(128)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
    😳 什么鬼这是？
&lt;/p&gt;

&lt;p&gt;
    没错，也许你用Python的第一天就遇到了这个问题，也许你一直都是在英文环境下编写Python程序所以从来没遇到过这个问题，择日不如撞日，
    今天就让我们好好地近距离地活体解剖这个Bug!
&lt;/p&gt;

&lt;p&gt;
    那么，用简洁的语言来概括这个问题就是Python2.x系统默认的编码系统(一般是ascii),
    在试图编码(encode)你给的其他编码系统(比如utf-8)的字符时，遇到了非法字符从而产生了错误。
&lt;/p&gt;

&lt;p&gt;
    打开Python2.x，然后输入下面的代码你就获得Python默认的encoding编码。
    &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getdefaultencoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'ascii'&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
    而发生这个问题应该怎么解决呢？很简单，使用正确的编码就可以解决问题啦。
    &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;c&quot;&gt;# 改变默认的编码系统&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefaultencoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# 如果你的字符是用其他编码系统下书写的，你需要将你的字符先转化为Python的Unicode编码，再转化为正确的编码，假设你的字符串是由gb2312编码的&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sUnicode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gb2312'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sUTF8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sUnicode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
    现在你的字符串都是由utf-8编码的，并且Python现在默认的解码系统也是utf-8。
&lt;/p&gt;

&lt;p&gt;
    看到这里也有可能你会觉得更加一头雾水了，刚刚到底发生了什么？！
    那么现在就让我们再次审视这个问题，从它的源头讲起...
&lt;/p&gt;
&lt;p&gt;
    以下内容参考&lt;a href=&quot;https://docs.python.org/2/howto/unicode.html&quot;&gt;Python官方文档&lt;/a&gt;。
&lt;/p&gt;

&lt;p&gt;
    我们都知道，在计算机的底层，每一种款式的数据都是由二进制数字表示的，字符也是。而最早出现的字符编码就是ascii。
    你可以在shell里输入'man ascii'来查看每一个数字和英文字母／符号的对应关系。但是只有区区8bit的ascii无法满足对应世上不同语言的成千上万的字符。
    所以新的编码系统就这样一个个被发明出来了，比如汉字的GBK，以及想要囊括全世界所有语言的编码系统Unicode。（瓦雷利亚语管不管?)
&lt;/p&gt;

&lt;p&gt;
    Unicode是一头身材硕大的编码系统，在Unicode里每一个字符都被一个code points(编码点）表示，一个Unicode字符串就由一系列的编码点组成。
    虽然Unicode非常简洁直接，但是它也存在几个问题。
    &lt;ul&gt;
        &lt;li&gt;*不可移植，因为不同的处理器对字节的处理顺序不同(Big endian vs Little endian)。&lt;/li&gt;
        &lt;li&gt;*浪费空间，大多数使用的编码点都小于127或者说255，所以使用完整的Unicode会使用很多不必要的bytes。&lt;/li&gt;
        &lt;li&gt;*与许多C的函数比如strlen()不兼容。&lt;/li&gt;
        &lt;li&gt;*许多互联网标准都使用文本数据定义的，它们不能处理内嵌的0字节。&lt;/li&gt;
    &lt;/ul&gt;
    所以使用Unicode变成了一件不是很实际的选择，那我们靠什么来拯救拥挤的互联网宽带呢？UTF-8就这样登场了!
&lt;/p&gt;

&lt;p&gt;
    UTF-8是一种针对Unicode的可变长度的字符编码，UTF的全称是UCS Transfer Format, 8代表着每次传输8bits的数据，
    UTF-8用1到4个字节编码Unicode字符, 它作为Unicode的一种具体实现，
    灵活的实现了在对应不同的字符时动态的变化长度，以达到节省内存以及网络带宽的目的。
&lt;/p&gt;

&lt;p&gt;
    那么今天我们这篇文章到底讲了什么呢？我们研究了一个Python的编码bug，然后逐渐深入研究计算机里字符编码的问题，
    有兴趣的同学可以阅读上面提供的Python官方文档，或者这个知乎上有关Unicde/UTF-8关系的&lt;a href=&quot;https://www.zhihu.com/question/23374078&quot;&gt;答案&lt;/a&gt;,
    提高一下姿势水平。
&lt;/p&gt;

&lt;hr/&gt;&lt;br/&gt;
&lt;p&gt;
为了放松一下阅读了本篇文章的你的心情，转移一下注意力，现在让我们看一道和今天文章有关的LeetCode算法题目如何？（这么做根本不会放松啊混蛋!)
&lt;/p&gt;

&lt;p&gt;
    LeetCode 393 UTF-8 Validation, &lt;a href=&quot;https://leetcode.com/problems/utf-8-validation/&quot;&gt;题目链接&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    以下则是本人的答案。
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validUtf8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//1 byte character&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//Get n&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toBinaryString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//N must be 2 to 4&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//Check if the following bytes are valid&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/p&gt;</description>
        <pubDate>Thu, 06 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2016/10/06/Study_Python_Encode.html</link>
        <guid isPermaLink="true">http://dachicj.com/2016/10/06/Study_Python_Encode.html</guid>
        
        
      </item>
    
  </channel>
</rss>
