<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dachi's Blog 达迟的博客</title>
    <description>Dachi's Personal Blog.</description>
    <link>http://dachicj.com/</link>
    <atom:link href="http://dachicj.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 03 Dec 2016 19:42:41 +0800</pubDate>
    <lastBuildDate>Sat, 03 Dec 2016 19:42:41 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>学习Webpack</title>
        <description>&lt;h3&gt;Webpack Config&lt;/h3&gt;
&lt;ol&gt;
    &lt;li&gt;入口文件&lt;/li&gt;
    &lt;li&gt;目的地址&lt;/li&gt;
    &lt;li&gt;loader: 用于转换各种文件&lt;/li&gt;
    &lt;li&gt;plugin: 提供各种插件功能&lt;/li&gt;
    &lt;li&gt;externals: 外部设定&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 27 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/comptuer/science/-/a.i/2016/11/27/Study-Webpack.html</link>
        <guid isPermaLink="true">http://dachicj.com/comptuer/science/-/a.i/2016/11/27/Study-Webpack.html</guid>
        
        
        <category>Comptuer</category>
        
        <category>Science</category>
        
        <category>-</category>
        
        <category>A.I</category>
        
      </item>
    
      <item>
        <title>学习Chromium源代码</title>
        <description>&lt;p&gt;
    Chrome是谷歌自家出品的浏览器，Chromium则是Chrome背后的引擎，作为一名想(bu)要(de)学(bu)习(xue)浏览器知识的码农,
    Chromium是非常具有研究价值的对象，不过这个Project极其庞大，我们只能从一些小的方面入手，做一些微小的学习工作。
&lt;/p&gt;

&lt;p&gt;
    在进行具体的学习之前，我们不妨从Chromium的代码结构入手，高屋建瓴地总览一下Chorimium, 这份
    &lt;a href=&quot;https://www.chromium.org/developers/how-tos/getting-around-the-chrome-source-code&quot;&gt;官方文档&lt;/a&gt;
    是一个很好的学习材料。
&lt;/p&gt;

&lt;p&gt;
    Chromium大致可以分为三个部分:
    &lt;ol&gt;
        &lt;li&gt;浏览器,负责所有的UI以及I/O。&lt;/li&gt;
        &lt;li&gt;渲染器,在一般情况下是由浏览器驱动的基于tab的子程序。&lt;/li&gt;
        &lt;li&gt;Webkit,渲染器嵌入了Webkit来进行布局和渲染。&lt;/li&gt;
    &lt;/ol&gt;
&lt;/p&gt;

&lt;p&gt;Chromium架构图:&lt;/p&gt;
&lt;img src=&quot;../../../img/chromium_arch.png&quot;&gt;

&lt;p&gt;
    Chromium由许多个子项目组成，这些项目有:
    &lt;ol&gt;
    &lt;li&gt;android_webview&lt;/li&gt;
    &lt;li&gt;apps&lt;/li&gt;
    &lt;li&gt;base&lt;/li&gt;
    &lt;li&gt;breakpad&lt;/li&gt;
    &lt;li&gt;build&lt;/li&gt;
    &lt;li&gt;cc&lt;/li&gt;
    &lt;li&gt;chrome: Chromium浏览器&lt;/li&gt;
    &lt;li&gt;chrome/test/data&lt;/li&gt;
    &lt;li&gt;components&lt;/li&gt;
    &lt;li&gt;content: 一个多进程沙箱浏览器的核心代码&lt;/li&gt;
    &lt;li&gt;device&lt;/li&gt;
    &lt;li&gt;net&lt;/li&gt;
    &lt;li&gt;sandbox&lt;/li&gt;
    &lt;li&gt;skia&lt;/li&gt;
    &lt;li&gt;sql&lt;/li&gt;
    &lt;li&gt;testing&lt;/li&gt;
    &lt;li&gt;third_party&lt;/li&gt;
    &lt;li&gt;tools&lt;/li&gt;
    &lt;li&gt;ui/gfx&lt;/li&gt;
    &lt;li&gt;ui/views: 一个UI开发的简单框架&lt;/li&gt;
    &lt;li&gt;url: Google的开源URL parsing库&lt;/li&gt;
    &lt;li&gt;v8: V8 JavaScript库&lt;/li&gt;
    &lt;li&gt;webkit: webkit相关代码&lt;/li&gt;
    &lt;/ol&gt;
&lt;/p&gt;

&lt;p&gt;
    缘于Chromium代码架构宏大，绝非一朝一夕能够理解、学习之项目，我将在未来持续地学习这个项目，加深我对浏览器的理解。
&lt;/p&gt;

&lt;p&gt;
    &lt;a href=&quot;https://chromium.googlesource.com/chromium/src.git/+/master&quot;&gt;源码地址&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;a href=&quot;https://www.chromium.org/Home&quot;&gt;延伸阅读&lt;/a&gt;
&lt;/p&gt;

</description>
        <pubDate>Wed, 19 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2016/10/19/Chromium-Code-Structure.html</link>
        <guid isPermaLink="true">http://dachicj.com/2016/10/19/Chromium-Code-Structure.html</guid>
        
        
      </item>
    
      <item>
        <title>学习MySQL体系结构</title>
        <description>&lt;h2&gt;MySQL技术内幕：InnoDB存储引擎大纲&lt;/h2&gt;
&lt;ol&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;MySQL体系结构&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;InnoDB存储引擎&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;文件&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;表&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;索引与算法&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;锁&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;事务&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;备份与恢复&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;性能调优&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
    &lt;li&gt;&lt;details&gt;&lt;summary&gt;InnoDB存储引擎源代码的编译和调试&lt;/summary&gt;&lt;/details&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;1.MySQL体系结构&lt;/h3&gt;
&lt;p&gt;数据库(Database)是文件的集合&lt;/p&gt;
&lt;p&gt;示例(Instance)是运行在内存中的示例&lt;/p&gt;
&lt;p&gt;
MySQL组成部分
    &lt;ul&gt;
      &lt;li&gt;连接池组件&lt;/li&gt;
      &lt;li&gt;管理服务和工具组件&lt;/li&gt;
      &lt;li&gt;SQL接口组件&lt;/li&gt;
      &lt;li&gt;查询分析器组件&lt;/li&gt;
      &lt;li&gt;优化器组件&lt;/li&gt;
      &lt;li&gt;缓冲(Cache)组件&lt;/li&gt;
      &lt;li&gt;插件式存储引擎&lt;/li&gt;
      &lt;li&gt;物理文件&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2016/10/12/MySQL_Engine.html</link>
        <guid isPermaLink="true">http://dachicj.com/2016/10/12/MySQL_Engine.html</guid>
        
        
      </item>
    
      <item>
        <title>Python数据结构List/Dict研究</title>
        <description>&lt;p&gt;
    &lt;b&gt;Python的List和Dict数据结构的底层是如何实现的?&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
    如果你曾经也思索过这个问题，或者在面试中被问到过这个问题？如果你是一名Python使用者，或者你是一名C语言程序员，无论如何如果这个问题引起了你的兴趣，
    那么欢迎你今天和我一起探索一下Python(CPython）底层是如何实现这两个数据结构的。
&lt;/p&gt;

&lt;p&gt;
    list和dicts是Python里常用的数据结构, Python程序员的日常工作离不开这两个数据结构，
    不过在list和dict为程序员提供了如此多的便利同时，我们也想了解它们工作时它的底层是如何真正运转的，研究这个问题不仅可以满足我们的好奇心，
    同样也将增进我们对这么语言的理解。
&lt;/p&gt;

&lt;p&gt;
    今天我们的研究材料是Python的CPython实现，是Python使用最广泛的Python解释器，
    其源代码可以在其&lt;a href=&quot;https://github.com/python/cpython/tree/2.7&quot;&gt;Github Repo&lt;/a&gt;上获得。
    而我们今天要学习的部分则位于Include和Objects文件夹下。
&lt;/p&gt;

&lt;p&gt;
    首先是list,让我们先来看看声明list数据结构的listobject.h，打开文件映入眼帘的是
    &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* 类型是名为PyVarObject的struct，其中的属性ob_size是记录了真正的数据的多寡 */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PyObject_VAR_HEAD&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Vector of pointers to list elements.  list[0] is ob_item[0], etc. */&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* ob_item就是指向元素列表的指针。*/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PyObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ob_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* allocated记录着实际请求的内存，这个数目大于实际储存的内存空间
         * 所以有 0 &amp;lt;= ob_size &amp;lt;= allocated
        */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Py_ssize_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyListObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
    再让我们来看看list的各种操作, 在listobject.c里首先定义了一些全局变量
    &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/* Empty list reuse scheme to save calls to malloc and free */&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#ifndef PyList_MAXFREELIST
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define PyList_MAXFREELIST 80
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyListObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;free_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PyList_MAXFREELIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numfree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
    这个free_list数组里面维护的指针所指对的内存才是list里的干货---PyListObject,
    那么这些指针到底指向哪里，list是如何进行初始化和各种操作的呢，我们接着往下看。
&lt;/p&gt;

&lt;h3&gt;
    未完待续...
&lt;/h3&gt;

&lt;p&gt;
    参考书籍：
    &lt;ol&gt;
        &lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/3117898/&quot;&gt;Python源码剖析&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2016/10/07/Study_Python_DS.html</link>
        <guid isPermaLink="true">http://dachicj.com/2016/10/07/Study_Python_DS.html</guid>
        
        
      </item>
    
      <item>
        <title>Python编码问题</title>
        <description>&lt;p&gt;
    那么，今天我们来学习一个非常骨骼精奇的Python知识点：Python的编码问题。
&lt;/p&gt;

&lt;p&gt;
    不知道诸位使用Python2.x的同学们有没有在撸代码的时候遇到过这样的情况
    &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'之乎者也'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;UnicodeEncodeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ascii'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t encode characters in position 0-3: ordinal not in range(128)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
    😳 什么鬼这是？
&lt;/p&gt;

&lt;p&gt;
    没错，也许你用Python的第一天就遇到了这个问题，也许你一直都是在英文环境下编写Python程序所以从来没遇到过这个问题，择日不如撞日，
    今天就让我们好好地近距离地活体解剖这个Bug!
&lt;/p&gt;

&lt;p&gt;
    那么，用简洁的语言来概括这个问题就是Python2.x系统默认的编码系统(一般是ascii),
    在试图编码(encode)你给的其他编码系统(比如utf-8)的字符时，遇到了非法字符从而产生了错误。
&lt;/p&gt;

&lt;p&gt;
    打开Python2.x，然后输入下面的代码你就获得Python默认的encoding编码。
    &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getdefaultencoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'ascii'&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
    而发生这个问题应该怎么解决呢？很简单，使用正确的编码就可以解决问题啦。
    &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;c&quot;&gt;# 改变默认的编码系统&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefaultencoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# 如果你的字符是用其他编码系统下书写的，你需要将你的字符先转化为Python的Unicode编码，再转化为正确的编码，假设你的字符串是由gb2312编码的&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sUnicode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gb2312'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sUTF8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sUnicode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
    现在你的字符串都是由utf-8编码的，并且Python现在默认的解码系统也是utf-8。
&lt;/p&gt;

&lt;p&gt;
    看到这里也有可能你会觉得更加一头雾水了，刚刚到底发生了什么？！
    那么现在就让我们再次审视这个问题，从它的源头讲起...
&lt;/p&gt;
&lt;p&gt;
    以下内容参考&lt;a href=&quot;https://docs.python.org/2/howto/unicode.html&quot;&gt;Python官方文档&lt;/a&gt;。
&lt;/p&gt;

&lt;p&gt;
    我们都知道，在计算机的底层，每一种款式的数据都是由二进制数字表示的，字符也是。而最早出现的字符编码就是ascii。
    你可以在shell里输入'man ascii'来查看每一个数字和英文字母／符号的对应关系。但是只有区区8bit的ascii无法满足对应世上不同语言的成千上万的字符。
    所以新的编码系统就这样一个个被发明出来了，比如汉字的GBK，以及想要囊括全世界所有语言的编码系统Unicode。（瓦雷利亚语管不管?)
&lt;/p&gt;

&lt;p&gt;
    Unicode是一头身材硕大的编码系统，在Unicode里每一个字符都被一个code points(编码点）表示，一个Unicode字符串就由一系列的编码点组成。
    虽然Unicode非常简洁直接，但是它也存在几个问题。
    &lt;ul&gt;
        &lt;li&gt;*不可移植，因为不同的处理器对字节的处理顺序不同(Big endian vs Little endian)。&lt;/li&gt;
        &lt;li&gt;*浪费空间，大多数使用的编码点都小于127或者说255，所以使用完整的Unicode会使用很多不必要的bytes。&lt;/li&gt;
        &lt;li&gt;*与许多C的函数比如strlen()不兼容。&lt;/li&gt;
        &lt;li&gt;*许多互联网标准都使用文本数据定义的，它们不能处理内嵌的0字节。&lt;/li&gt;
    &lt;/ul&gt;
    所以使用Unicode变成了一件不是很实际的选择，那我们靠什么来拯救拥挤的互联网宽带呢？UTF-8就这样登场了!
&lt;/p&gt;

&lt;p&gt;
    UTF-8是一种针对Unicode的可变长度的字符编码，UTF的全称是UCS Transfer Format, 8代表着每次传输8bits的数据，
    UTF-8用1到4个字节编码Unicode字符, 它作为Unicode的一种具体实现，
    灵活的实现了在对应不同的字符时动态的变化长度，以达到节省内存以及网络带宽的目的。
&lt;/p&gt;

&lt;p&gt;
    那么今天我们这篇文章到底讲了什么呢？我们研究了一个Python的编码bug，然后逐渐深入研究计算机里字符编码的问题，
    有兴趣的同学可以阅读上面提供的Python官方文档，或者这个知乎上有关Unicde/UTF-8关系的&lt;a href=&quot;https://www.zhihu.com/question/23374078&quot;&gt;答案&lt;/a&gt;,
    提高一下姿势水平。
&lt;/p&gt;

&lt;hr/&gt;&lt;br/&gt;
&lt;p&gt;
为了放松一下阅读了本篇文章的你的心情，转移一下注意力，现在让我们看一道和今天文章有关的LeetCode算法题目如何？（这么做根本不会放松啊混蛋!)
&lt;/p&gt;

&lt;p&gt;
    LeetCode 393 UTF-8 Validation, &lt;a href=&quot;https://leetcode.com/problems/utf-8-validation/&quot;&gt;题目链接&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    以下则是本人的答案。
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validUtf8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//1 byte character&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//Get n&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toBinaryString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//N must be 2 to 4&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//Check if the following bytes are valid&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/p&gt;</description>
        <pubDate>Thu, 06 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2016/10/06/Study_Python_Encode.html</link>
        <guid isPermaLink="true">http://dachicj.com/2016/10/06/Study_Python_Encode.html</guid>
        
        
      </item>
    
      <item>
        <title>学习RESTful API</title>
        <description>&lt;p&gt;
    &lt;b&gt;REST , RESTful , RESTful API&lt;/b&gt;是程序员耳熟能详的概念，但是这些概念背后的具体含义是什么？有什么作用，又该怎么应用？
    这些看似简单的问题却不是每一个程序员在面试中都能完全回答清楚的，为了更好的理解这些概念，今天我们牺牲rest的时间来学习一下来好好学一下REST。
&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;
        &lt;p&gt;
        &lt;i&gt;首先，什么是REST呢?&lt;/i&gt;
        &lt;/p&gt;

        &lt;p&gt;
        REST的概念由Roy Thomas Fielding在其2000年的&lt;a href=&quot;http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm&quot;&gt;博士论文&lt;/a&gt;中提出。
        REST是他提出的一套对互联网软件的架构原则。REST的全称是&lt;b&gt;Re&lt;/b&gt;presentational &lt;b&gt;S&lt;/b&gt;tate &lt;b&gt;T&lt;/b&gt;rasfer。
        &lt;/p&gt;

        &lt;img style=&quot;width:200px;&quot; src=&quot;/img/mengbi.jpeg&quot;&gt;&lt;br/&gt;&lt;br/&gt;

        &lt;p&gt;
        好吧，其实脱离了论文的语境来看Representational State Transfer确实有些难以理解，但是REST中的Representational是针对互联网中的资源，
        这些资源可以是文本，图片，音频或者视频，按照REST风格的规定每一个资源都要有一个特定的URI，要获得一个资源就要访问它的URI。
        而Representational则表示资源的表现形式，比如一段文字可以用txt,html等格式表示。而资源的获取者要使用不同的操作来获得这些资源的状态，
        也就是State。Transfer相对就好理解了，它的字面意义就是传输。
        所以REST的就是一套规定如何在分布式系统中&lt;b&gt;定位，表示以及操作&lt;/b&gt;资源的风格。
        &lt;/p&gt;

        &lt;p&gt;
        在Roy Thomas Fiedling的论文中，他设计了REST风格的规范（客户端-服务器模式，无状态请求，缓存，统一接口，分层系统，按需代码)。
        以及REST风格中的组成部分，数据元素(资源，资源的识别URL/URN，资源的格式等)，连接者(客服端，服务器，缓存，DNS等)。
        想要更深入理解REST的同学可以尽情阅读他的论文，在这里我们就不做更深入的展开了。
        &lt;/p&gt;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;p&gt;
        &lt;i&gt;好吧，勉强算是理解了REST,那什么是RESTful?&lt;/i&gt;
        &lt;/p&gt;

        &lt;p&gt;
        RESTful就是符合REST风格的意思。(逃
        &lt;/p&gt;

        &lt;p&gt;
        引用知乎上大神的总结来说就是用URI代表资源，用HTTP操作(GET,PUT,POST,DELETE,PATCH)来操作资源。
        &lt;/p&gt;

    &lt;/li&gt;

    &lt;li&gt;
        &lt;p&gt;
        &lt;i&gt;要不要回答的那么简陋啊？那什么又是RESTful API?&lt;/i&gt;
        &lt;/p&gt;

        &lt;p&gt;
        RESTful API指的就是要按照符合REST架构的风格来设计API, 使得这些API能够符合REST架构简洁，清晰，易于理解和扩充的特性。
        &lt;/p&gt;

        &lt;p&gt;
        那么既然REST风格设定了用URL代表资源，用HTTP操作来获取资源，RESTful API的设计就要在这两个方面上下功夫。
        当然出了URI设计和使用适合的HTTP操作之外，还要很多需要关注的方面，比如API的协议，API返回的状态码和结果，
        异常处理，Hypermedia API等待。
        &lt;/p&gt;

    &lt;/li&gt;

    &lt;li&gt;
        &lt;p&gt;
        &lt;i&gt;那说了这么多务虚的东西，到底应该如何设计RESTFUL API呢？(这才是吾等码农最为关心的好吗!)&lt;/i&gt;
        &lt;/p&gt;
        

        &lt;p&gt;
        我们可以来参考一下最大同性交友社区&lt;a href=&quot;https://developer.github.com/v3/&quot;&gt;Github的API&lt;/a&gt;，作为学习的对象。
        &lt;/p&gt;

        &lt;p&gt;
        首先，来看看Github API的域名根路径
        &lt;/p&gt;

        &lt;p class=&quot;grey lighten-2&quot;&gt;
        https://api.github.com/
        &lt;/p&gt;

        &lt;p&gt;
        我们可以看到Github为API采用了专用的域名,并且使用的是HTTPS协议。接下来看一些实例。
        &lt;/p&gt;

        &lt;p&gt;
        例子1，获取一个用户
        &lt;/p&gt;

        &lt;p class=&quot;grey lighten-2&quot;&gt;
        &lt;i&gt;GET /users/:username&lt;/i&gt;
        &lt;/p&gt;

        &lt;p&gt;
        返回的结果如下
        &lt;/p&gt;

        &lt;p class=&quot;grey lighten-2&quot;&gt;
        Status: 200 OK
        {
         &quot;login&quot;:&quot;octocat&quot;,
         &quot;id&quot;:1,
         ...
        }
        &lt;/p&gt;

        &lt;p&gt;
        在这个例子中，URI的第一个部分是users,表示要获取的的是users相关的资源，获取某一个user则需要提供username,
        而成功返回的Status code是200，返回的结果包括了这个user的各种信息。
        &lt;/p&gt;

        &lt;p&gt;
        例子2: 更新已认证的用户信息
        &lt;/p&gt;

        &lt;p class=&quot;grey lighten-2&quot;&gt;
        &lt;i&gt;PATCH /user&lt;/i&gt;
        &lt;/p&gt;
        
        &lt;p&gt;
        传输的参数示例如下
        {
          &quot;name&quot;: &quot;monalisa octocat&quot;,
          &quot;email&quot;: &quot;octocat@github.com&quot;,
          &quot;blog&quot;: &quot;https://github.com/blog&quot;,
          &quot;company&quot;: &quot;GitHub&quot;,
          &quot;location&quot;: &quot;San Francisco&quot;,
          &quot;hireable&quot;: true,
          &quot;bio&quot;: &quot;There once...&quot;
        },
        返回结果类同例子1。
        &lt;/p&gt;

        &lt;p&gt;
        例子3: 为已认证用户创建新的Repository
        &lt;/p&gt;

        &lt;p class=&quot;grey lighten-2&quot;&gt;
        &lt;i&gt;POST /user/repos&lt;/i&gt;
        &lt;/p&gt;

        &lt;p&gt;
        参数示例如下
        {
          &quot;name&quot;: &quot;Hello-World&quot;,
          &quot;description&quot;: &quot;This is your first repository&quot;,
          &quot;homepage&quot;: &quot;https://github.com&quot;,
          &quot;private&quot;: false,
          &quot;has_issues&quot;: true,
          &quot;has_wiki&quot;: true,
          &quot;has_downloads&quot;: true
        }
        &lt;/p&gt;

        &lt;p&gt;
        返回结果为
        &lt;p class=&quot;grey lighten-2&quot;&gt;
        Status: 201 Created
        &lt;br/&gt;
        Location: https://api.github.com/repos/octocat/Hello-World
        &lt;br/&gt;
        {
            &quot;id&quot;:1296269,
            &quot;owner&quot;:...,
            &quot;name&quot;:&quot;Hello-World&quot;...,
        }
        &lt;/p&gt;
        &lt;/p&gt;

        &lt;p&gt;
        例子4：删除一个Repo
        &lt;/p&gt;

        &lt;p class=&quot;grey lighten-2&quot;&gt;
        &lt;i&gt;DELETE /repos/:owner/:repo&lt;/i&gt;
        &lt;/p&gt;

        &lt;p class=&quot;grey lighten-2&quot;&gt;
        Status: 204 No Content
        &lt;/p&gt;

        &lt;p&gt;
        通过以上例子我们可以看出，每一种HTTP协议的请求都对应CRUD中的一种操作：
        GET用来获取资源，POST用来创建资源，PUT用来更新资源，PATCH用来更新部分资源。DELETE用来删除资源。
        &lt;/p&gt;

        &lt;p&gt;
        而在URI的设计中，资源都用名词来表示，一类资源用复数单词来表示（比如users,repos)，
        定位更具体的资源则要在API路径里面详细标示出。
        &lt;/p&gt;

        &lt;p&gt;
        返回请求的Status code设计必须使用户简洁明了的明白该请求的结果，并反映了每一种结果的后果。
        &lt;/p&gt;

        &lt;p&gt;
        以上的总结只是为了给不熟悉REST等概念的读者朋友们一个感性的认识，而想更加深入的了解REST和RESTful风格还需要读者们
        研究更多的资料，参考优秀API的设计，并且多多实践，对本文有什么意见和建议也欢迎在下面留言评论。
        &lt;/p&gt;

    &lt;/li&gt;

    &lt;li&gt;
        &lt;p&gt;
        参考文献:
        &lt;/p&gt;
        
         &lt;p&gt;
         &lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/restful_api.html&quot;&gt;
             RESTful API 设计指南 by 阮一峰
         &lt;/a&gt;
         &lt;/p&gt;
         
         &lt;p&gt;
         &lt;a href=&quot;http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm&quot;&gt;
             Architectural Styles and the Design of Network-based Software Architectures
         &lt;/a&gt;
         &lt;/p&gt;

         &lt;p&gt;
         &lt;a href=&quot;https://book.douban.com/subject/4791069/&quot;&gt;REST in Practice&lt;/a&gt;
         &lt;/p&gt;
    &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 04 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2016/10/04/Study_RESTful_api.html</link>
        <guid isPermaLink="true">http://dachicj.com/2016/10/04/Study_RESTful_api.html</guid>
        
        
      </item>
    
      <item>
        <title>MVVM以和Virtual DOM原理以及实现</title>
        <description>&lt;p&gt;
    本文目的
&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;什么是MVVM或者Virtual DOM?&lt;/li&gt;
    &lt;li&gt;为什么使用MVVM或者Virtual DOM?&lt;/li&gt;
    &lt;li&gt;如何实现MVVM和Virtual DOM&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Virtual DOM的工作机制&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;构建Virtual DOM树&lt;/li&gt;
    &lt;li&gt;比较新旧Virtual DOM树之间的差异&lt;/li&gt;
    &lt;li&gt;将差异应用到真正的DOM树上&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
    简单Virtual DOM实现
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childEl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ulRoot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ulRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
    简单MVVM实现
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attachEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'oninput'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;air&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;air&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'temperature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'get!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'set!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;air&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;air&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Tue, 04 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2016/10/04/Study_MVVM_VIRTUALDOM.html</link>
        <guid isPermaLink="true">http://dachicj.com/2016/10/04/Study_MVVM_VIRTUALDOM.html</guid>
        
        
      </item>
    
      <item>
        <title>知乎面试总结</title>
        <description>&lt;p&gt;
    在9月的最后一天，我很荣幸得来到了我非常喜欢的互联网公司&lt;a href=&quot;https://www.zhihu.com&quot; target=&quot;_blank&quot;&gt;知乎&lt;/a&gt;来面试，
    在此我将稍加总结面试中得到的反馈和自己的反思，并且附上对面试中一些问题更深入的学习和理解。
&lt;/p&gt;

&lt;p&gt;
    面试总共由两个来自不同部门的面试官考察，问到的题目涵盖了从计算机科学到编程的不同方面。
    这次面试使我更加了解了国内互联网面试的考察风格（创业公司），并且也更加认识到自己知识面在水平和结构上的不足，
    为我将来提高自身姿势水平提供了很好的指导作用, 实在需要感谢两位面试官的指点。
&lt;/p&gt;

&lt;p&gt;
    此次面试中主要考察的有
&lt;/p&gt;

&lt;p&gt;
    面试官1
    &lt;ul&gt;
        &lt;li&gt;(1).Python里List的底层实现（是Array-based还是Linked-based)&lt;/li&gt;
        &lt;li&gt;(2).Python里Dict的底层如何实现&lt;/li&gt;
        &lt;li&gt;(3).解释一下Python的GIL，对性能有什么影响&lt;/li&gt;
        &lt;li&gt;(4).什么时候用多进程，什么时候用多线程&lt;/li&gt;
        &lt;li&gt;(5).node.js的机制（单线程异步，为什么在Java/Python都能多线程的时候还要用node.js, 用node.js能带来什么好处)&lt;/li&gt;
        &lt;li&gt;(5).讨论不同语言的并发机制&lt;/li&gt;
        &lt;li&gt;(6).Python的encode/decode 问题有没有遇到过&lt;/li&gt;
        &lt;li&gt;(7).简述Mergesort或者Quicksort的原理，复杂度是什么，是否稳定（Quicksort不稳定,原因是Pivot的选取有可能不理想，如何改善？给出两种改善方法）&lt;/li&gt;
        &lt;li&gt;(8).MySQL的引擎是什么？讨论一下(InnoDB)&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
    面试官2
    &lt;ul&gt;
        &lt;li&gt;(1).虚拟化的实现机理是什么(因为我有个实习是做云计算的，所以问到）&lt;/li&gt;
        &lt;li&gt;(2).如何设计RESTful API&lt;/li&gt;
        &lt;li&gt;(3).React.js/Vue.js这种前端MVVM具体如何实现。&lt;/li&gt;
        &lt;li&gt;(4).算法题: DFS相关&lt;/li&gt;
        &lt;li&gt;(5).一道数学推理题&lt;/li&gt;
        &lt;li&gt;(6).贝叶斯网络的应用，如何运用贝叶斯屏蔽垃圾邮件，TF-IDF的问题。&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
    这次面试让我感觉我目前的知识结构里最大的问题或特点就是&quot;广而不精&quot;，Web开发中的前端和后端，算法，语言，云计算，分布式系统，人工智能等等。
    每种技术都有一些涉猎，有一些使用的经验，但是对于技术的钻研不够深入和透彻，对于技术的学习仅仅处在会使用而不是研究其底层机制的层次上，
    这样的知识结构将不足以解决面试中会遇到的问题，更不足以解决日后工作中可能会遇上的种种难题，为此我应该以此为戒，改变以往见猎心喜，走马观花的学习习惯。
    我将从这次面试中遇到的问题开始，慢慢钻研，将广度学习和深度学习相结合，成为更优秀的程序员。
&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;../07/Study_Python_DS.html&quot;&gt;Python底层数据结构的实现(未完成)&lt;/a&gt;&lt;/h4&gt;

&lt;h4&gt;&lt;a href=&quot;&quot;&gt;Python GIL机制以及影响(未完成)&lt;/a&gt;&lt;/h4&gt;

&lt;h4&gt;&lt;a href=&quot;../06/Study_Python_Encode.html&quot;&gt;Python encode/decode问题&lt;/a&gt;&lt;/h4&gt;

&lt;h4&gt;&lt;a href=&quot;&quot;&gt;多进程与多线程比较(未完成)&lt;/a&gt;&lt;/h4&gt;

&lt;h4&gt;&lt;a href=&quot;&quot;&gt;Node.js机制(未完成)&lt;/a&gt;&lt;/h4&gt;

&lt;h4&gt;&lt;a href=&quot;&quot;&gt;不同并发模型比较(未完成)&lt;/a&gt;&lt;/h4&gt;

&lt;h4&gt;&lt;a href=&quot;&quot;&gt;排序算法复杂度与稳定性总结(未完成)&lt;/a&gt;&lt;/h4&gt;

&lt;h4&gt;&lt;a href=&quot;../12/MySQL_Engine.html&quot;&gt;MySQL引擎学习(未完成)&lt;/a&gt;&lt;/h4&gt;

&lt;h4&gt;&lt;a href=&quot;../04/Study_RESTful_api.html&quot;&gt;学习RESTful API&lt;/a&gt;&lt;/h4&gt;

&lt;h4&gt;&lt;a href=&quot;../04/Study_MVVM_VIRTUALDOM.html&quot;&gt;MVVM以和Virtual DOM原理以及实现(未完成)&lt;/a&gt;&lt;/h4&gt;

&lt;h4&gt;&lt;a href=&quot;&quot;&gt;贝叶斯网络应用(未完成)&lt;/a&gt;&lt;/h4&gt;

&lt;h4&gt;&lt;a href=&quot;&quot;&gt;TD-IDF总结(未完成)&lt;/a&gt;&lt;/h4&gt;

</description>
        <pubDate>Sat, 01 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2016/10/01/Zhihu_Interview_Notes.html</link>
        <guid isPermaLink="true">http://dachicj.com/2016/10/01/Zhihu_Interview_Notes.html</guid>
        
        
      </item>
    
      <item>
        <title>学习笔记_20160923</title>
        <description>&lt;p&gt;
更新频率犹如企业发布财务年报一般的本博客居然又迎来更新了，今天学习了一些HTML5标准的历史知识，在此稍作总结分享。
&lt;/p&gt;

&lt;p&gt;
&lt;em&gt;
学习资料：HTML5 and CSS3 For The Real World, 2nd Edition
&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;
今天看到书中介绍的HTML5标准的故事到很有意思，在此稍作翻译总结。
&lt;/p&gt;

&lt;p&gt;
在HTML5标准诞生之前，大行其道的是HTML4和XHTML，而HTML4又让位于XHMTL(其实XHTML只不过是HTML4符合XML语法的版本)。
而HTML5的标准则是由两个组织开发的，他们分别是W3C(World Wide Web Consortium 3W委员会)和
WHATWG(Web Hypertext Application Technology Working Group)，W3C是自打有互联网以来便是HTML/CSS标准的制定者，
而WHATWG是由一群来自苹果，Mozilla(火狐)，Opera等浏览器制作厂商中的人员组成的，他们在2004年的W3C会议上感觉到
非常失望并且认为W3C忽视了浏览器制作者和用户的需求，所以另起炉灶开始制作他们自己的Web标准，从此也引发了两个组织之间的斗法。
&lt;/p&gt;

&lt;p&gt;
WHATWG的标准可以在&lt;a href=&quot;http://www.whatwg.org/html/&quot;&gt;http://www.whatwg.org/html/&lt;/a&gt;找到，现在WHATWG已经去掉了
HTML5中的5，这份标准现在叫做&quot;活的标准&quot;（或者叫动态标准)。这意味着这个标准将不停的处于演化的过程中，并不再被冠以版本号。
WHATWG的标准基本只包括和HTML相关的特性，当然也有一些其他相关的技术比如Microdata, Canvas 2d Context, Web Worker, Web Storage
等技术被包含在内。
&lt;/p&gt;

&lt;p&gt;
W3C的标准则可以在此处&lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/&quot;&gt;http://www.w3.org/html/wg/drafts/html/master/&lt;/a&gt;找到。
&lt;/p&gt;

&lt;p&gt;一言以蔽之，WHATWG的标准更加非正式，也更具有试验性，但是大多数情况下这两个标准都基本一致。&lt;/p&gt;

&lt;p&gt;
那么这些HTML标准之争除了拿来解闷还有什么其他意义呢，其实这些技术的演化也在影响着这个行业的业内人士，比如Web前端工程师天天要处理的
浏览器兼容问题，说白了就是落后浏览器与更新的标准之间的矛盾，每一个版本的浏览器实现了当时的Web标准，却不能正确的处理新标准下的
markup,style以及API，而这些过去的浏览器又缺乏自动更新的功能，工程师们只好要么忽视问题(Border-radius在低版本下不显示圆角也无伤大雅)，
要么标注Doctype让浏览器选择正确的渲染模式，或者使用Polyfill的技术来在低版本浏览器下实现那些新的功能。除此之外，工程师们还可以阅读
学习这些标准，为将来可能所发生的技术变化做好准备。
&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2016/09/23/Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_20160923.html</link>
        <guid isPermaLink="true">http://dachicj.com/2016/09/23/Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_20160923.html</guid>
        
        
      </item>
    
      <item>
        <title>如何从人工智能领域开始职业道路</title>
        <description>&lt;p&gt;在Quora看到一位脸书AI实验室的实习生对于这个问题的回答，觉得很有趣，也很有启发，所以尝试翻译一下和大家分享。大家对原回答和翻译有什么意见和建议都不访提出。（带＊号的内容为注释）&lt;/p&gt;

&lt;p&gt;Quora 应该在哪里寻找跟人工智能相关的职业？
原回答链接：&lt;a href=&quot;https://www.quora.com/Where-does-one-start-to-get-a-career-in-Artificial-Intelligence&quot;&gt;https://www.quora.com/Where-does-one-start-to-get-a-career-in-Artificial-Intelligence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;目前来说绝大部分搞人工智能相关的工作意味着你要去做机器学习（特别是深度学习），这里有几种不同的路径，每一种方式都具有挑战性并且有不同的乐趣。&lt;/p&gt;

&lt;p&gt;在过去十年业界对于深度学习技术的兴趣逐渐增长，极少数的几所大学开授了与时俱进的课程，比如Stanford的CS213n. 而对于从业人员的要求不仅仅是很好的计算机科学背景，而必须要熟悉神经网络的算法以及应用技巧。虽然这些教育背景并不是必须的要求，但是如果你能够有机会上这样的课程，你的老师就有可能是业界活跃的研究人士或者开发者，这种机会就会很有帮助。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;第一条路径是学术，优缺点如下&lt;/h4&gt;

&lt;p&gt;优势:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;深度学习“深度学习”，是的，如果你读一个博士, 你会里里外外学通透至少一种技术，如果你努力学习并且和别人有很好的合作以及找到了强力导师，你甚至可以在NIPS(*神经信息处理系统）这样的会议上发表文章，而能做到这点你基本可以随便挑你想要的职位了（除非你有一些特别不利的条件）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;坚实的数学基础，你会比你的同僚们更快更深入地理解各种事物。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;劣势：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对你学术水平的要求的困难级别从“非常高”到“这特么是什么鬼画符”不等，具体取决于你的专业领域以及你在实验室进行的一系列工作，在我的一次面试中一上来就被问到Integral operators’ kernels（*很好，果然不懂怎么翻译）。&lt;/li&gt;
  &lt;li&gt;你的职业进度可能非常慢，读博士是一个长时间的付出，当别人在做东西的时候，你在试图研发能够超越别人的算法。也许你会成功。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-1&quot;&gt;如果这不是你最理想的路径，那么你可以考虑人工智能的创业公司，在这个话题下请对我说的任何事情都保持一定的怀疑态度，我对人工神经网络有一些了解，但我对创业公司还不是很熟悉&lt;/h4&gt;

&lt;p&gt;优势：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;你可以立马开始动手并且做任何你想做的。&lt;/li&gt;
  &lt;li&gt;没有人对你该做什么指手画脚，至少来说一段时间是的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;劣势：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;你有可能会失败，应该说很大可能会失败，而且对于其他的各种创业公司来说都是一样的，只不过人工智能创业公司还要面对人工智能技术门槛高，并且投资人不多的不利情况，除非你又一个很棒的计划，很棒的产品，很棒的团队并且你像Demis Hassabis一样聪明。&lt;/li&gt;
  &lt;li&gt;制作人工智能产品很难&lt;/li&gt;
  &lt;li&gt;非常难&lt;/li&gt;
  &lt;li&gt;深度学习不是万金油&lt;/li&gt;
  &lt;li&gt;我说过做人工智能产品很难了吗？&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-2&quot;&gt;当你没什么经验的时候，对你未来最有效的投资就是获得更多的知识和经验，当加入一个创业公司时，令人头疼的财务烦恼以及情绪过山车都会让生活变的更加复杂，所以一个业内实习是一个更舒适的学习途径。&lt;/h4&gt;

&lt;p&gt;优势：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;比进入一个很好的学校简单些&lt;/li&gt;
  &lt;li&gt;你会开始做一些真正的产品&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;劣势：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;这一行的竞争还是很激烈，如果你的年龄偏大或者没有相关的经验，比如机器学习，科学思维或者计算机背景，这些都将成为你的劣势。&lt;/li&gt;
  &lt;li&gt;你没法选择你要做什么。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第一条劣势可能在你去创业公司会成为更大的劣势…&lt;/p&gt;

&lt;p&gt;整个行业现在也在处于自我探索的阶段，没人知道什么时候都能搞清楚，也许不会很快，但你需要现在就行动。&lt;/p&gt;

&lt;p&gt;暂时不要去管企业级技术(*原文里为coporate technologies)，不要去管编程竞赛，硬件，hacking等一切其他孩子觉得很cool的东西， 阅读Goodfellow, Bengio, Courville的深度学习，这本书有恰好的数学内容。获取一些一般性的机器学习经验，实现一些简单的东西。你会发现当你面试的时候这些知识还挺有用的。获得一些特殊技能，比如操作Theano或者TensorFlow, 对于这种复杂运算的经验将会使你的履历表很突出。找到你在A.I领域的特殊兴趣， 可以是计算机视觉，语音识别，自然语言处理或者任何你喜欢的领域。&lt;/p&gt;

&lt;p&gt;语言层面，Python是很好的选择，写一堆的代码，放到GitHub上，之后再不断迭代成更好的代码，也许里面会包含着你未来可以发表在NIPS论文上的模型，谁知道呢。但是现在就动手，如果有一件事我是想回到过去改变的，就是花更多的时间用在写代码上。&lt;/p&gt;

</description>
        <pubDate>Sun, 17 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/comptuer/science/-/career/2016/07/17/%E5%A6%82%E4%BD%95%E4%BB%8E%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E9%A2%86%E5%9F%9F%E5%BC%80%E5%A7%8B%E8%81%8C%E4%B8%9A%E9%81%93%E8%B7%AF.html</link>
        <guid isPermaLink="true">http://dachicj.com/comptuer/science/-/career/2016/07/17/%E5%A6%82%E4%BD%95%E4%BB%8E%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E9%A2%86%E5%9F%9F%E5%BC%80%E5%A7%8B%E8%81%8C%E4%B8%9A%E9%81%93%E8%B7%AF.html</guid>
        
        
        <category>Comptuer</category>
        
        <category>Science</category>
        
        <category>-</category>
        
        <category>Career</category>
        
      </item>
    
  </channel>
</rss>
