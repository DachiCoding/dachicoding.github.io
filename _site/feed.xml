<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dachi's Blog 达迟的博客</title>
    <description>Dachi's Personal Blog.</description>
    <link>http://dachicj.com/</link>
    <atom:link href="http://dachicj.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 19 Apr 2018 22:54:55 +0800</pubDate>
    <lastBuildDate>Thu, 19 Apr 2018 22:54:55 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>2018-04-19 React事件系统总结</title>
        <description>&lt;p&gt;React作为目前前端业界最流行的mvvm框架之一已经被广大前端同学所熟知，而在日常工作中已经熟悉使用React的我们对React内部的工作流程、设计理念是否又有足够的了解呢？为了更深入理解MVVM框架以及React,我和组内其他同学展开了对React的学习，以下是本次系列研究中对于React事件(DOM)系统的研究。&lt;/p&gt;

&lt;p&gt;一、React事件系统概况
1.1 React的事件处理
熟练使用React的前端同学相信对于以下这段代码并会不陌生：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DachiCoding/study-notes/blob/master/images/react-event-study/img01.png?raw=true&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面这张图是一个从React官网借来的事件处理的例子,在React中想要让某些元素监听事件的方法就是在元素上(在这里是a)设置想要监听的事件(onClick)以及事件触发后的回调函数(handleClick), 而真的事件一旦发生后React是如何处理并触发事件回调的呢，我们今天就要研究其内部的工作机制。&lt;/p&gt;

&lt;p&gt;1.2 合成事件
在上面那张图里handleClick函数的参数e并不是我们通常以为的DOM原生事件，而是React事件系统独有的概念：合成事件SyntheticEvent，合成事件是React对原生事件(DOM)的抽象封装，合成事件的属性包括&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;nativeEvent 合成事件对应的原生事件&lt;/li&gt;
  &lt;li&gt;preventDefault() 阻止默认行为&lt;/li&gt;
  &lt;li&gt;stopPropagation() 阻止事件传播&lt;/li&gt;
  &lt;li&gt;currentTarget 当前事件处理的元素&lt;/li&gt;
  &lt;li&gt;target 触发事件的元素&lt;/li&gt;
  &lt;li&gt;等其他属性和方法
而React之所以要创造合成事件这个新的概念，其主要原因是要抹平跨浏览器差异，因为不同的浏览器的事件机制处理不尽相同，所以React需要这一层额外的封装来统一React的事件处理行为；此外，React的事件系统还使用了事件池来存放事件以提高性能，减少内存开销。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.3 React事件系统总览
我们先来看看React官方对于事件系统工作流程的描述,下图来自官方源码: https://github.com/facebook/react/blob/master/packages/react-dom/src/events/ReactBrowserEventEmitter.js&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DachiCoding/study-notes/blob/master/images/react-event-study/img02.png?raw=true&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过上图我们大致可以知道,React事件系统由几部分构成：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;ReactEventListener负责监听DOM事件&lt;/li&gt;
  &lt;li&gt;ReactEventEmitter负责将事件传送给EventPluginHub&lt;/li&gt;
  &lt;li&gt;EventPluginHub(事件插件容器的容器，这个容器负责容纳各种所谓的事件插件(EventPlugin)&lt;/li&gt;
  &lt;li&gt;EventPlugin的工作就是将原生事件转换为React自定义的合成事件(SyntheticEvent)，并搜集这个事件都有哪些元素在监听和监听的回调，最后在应用层级(application）触发回调。&lt;/li&gt;
  &lt;li&gt;现在我们对React事件系统已经有了一个抽象的了解，下面我们具体看看React是如何完成从绑定监听、事件触发到调用回调这样一个完整的流程的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;二、React事件系统工作机制
2.1 React源码事件系统相关代码介绍
在进入介绍React事件系统工作机制之前，我们先了解一下React源码中哪些部分在此次的讨论范围之内(以2018-04-13 v16.3版本为准)&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;packages/events是事件系统的核心代码，内含合成事件与EventPlugin相关模块，是跨平台(DOM,ReactNative)通用的抽象事件处理相关代码&lt;/li&gt;
  &lt;li&gt;packages/react-dom/src/client 包含React Virtual DOM相关的核心代码&lt;/li&gt;
  &lt;li&gt;packages/react-dom/src/events 包含与DOM相关的事件处理代码，包括DOM的事件监听器ReactDOMEventListener等等。 &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DachiCoding/study-notes/blob/master/images/react-event-study/img03.png?raw=true&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面来介绍React事件系统的具体工作流程
2.2 绑定监听阶段
在早先的前端开发年代，我们想要监听某个元素上的事件通常会直接给这个元素加上事件监听(或者通过给其母元素加上事件监听代理），但无论如何事件监听都设置在了该元素或者该元素相近元素的身上，React监听DOM事件的逻辑则不同，React会在Document层面统一监听事件，而不会在具体元素上添加eventListener，这样避免了在UI复杂的情况下要给数量众多的DOM元素增加eventListener的过程，React统一在Document层面监听事件并寻找各个监听了该事件的Component,再执行它们的回调。而React绑定事件监听的流程如下&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;在React准备渲染阶段，ReactDOMFiberComponent.js(Virtual DOM的最小独立单元Fiber)会调用setInitialDOMProperties方法初始化React元素的属性&lt;/li&gt;
  &lt;li&gt;setInitialDOMProperties方法里如果发现这个组件设置了监听事件就会调用ensureListeningTo方法来监听这个事件(具体的监听绑定不在此处)&lt;/li&gt;
  &lt;li&gt;ensureListeningTo会调用ReactBrowserEventEmitter模块的listenTo方法来进行对具体事件的监听,listenTo方法会根据事件类型来决定监听是在捕获还是冒泡阶段。（scroll,focus,blur,cancel,close事件监听捕获阶段，其他时间监听在冒泡阶段）&lt;/li&gt;
  &lt;li&gt;listenTo方法调用ReactDOMEventListener模块的trapCapturedEvent/trapBubbledEvent方法进行监听&lt;/li&gt;
  &lt;li&gt;trapCapturedEvent/trapBubbledEvent会调用EventListener.js的addEventBubbleListener/addEventCaptureListener方法进行DOM层级的事件监听,而监听的回调是一个叫做dispatchEvent的方法,dispatchEvent是DOM原生事件触发后React事件处理流程的起点.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DachiCoding/study-notes/blob/master/images/react-event-study/img04.png?raw=true&quot; alt=&quot;alt&quot; /&gt;
至此，React时间系统的事件监听绑定完成.&lt;/p&gt;

&lt;p&gt;2.2 事件触发至生成合成事件阶段
当DOM的原生事件触发后,React事件系统会如何运转呢，上一部分提到ReactDOMEventListener的dispatchEvent方法会被触发，以下是事件触发后的流程&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;原生事件被触发：比如，你点击了一个button&lt;/li&gt;
  &lt;li&gt;ReactDOMEventListener的dispatchEvent方法会收到原生事件,并将原生事件和将触发事件元素所在的虚拟DOM节点等其他信息组合成一个叫Bookkeeping的对象&lt;/li&gt;
  &lt;li&gt;ReactDOMEventListener会调用handleTopLevel方法来处理Bookkeeping对象,在handleTop方法内调用EventPluginHub.js的runExtractedEventsInBatch方法,此时事件处理的任务让渡给EventPluginHub(如1.3图中所示)&lt;/li&gt;
  &lt;li&gt;EventPluginHub的runExtractedEventsInBatch方法会调用extractEvents方法,extractEvents函数的作用就是根据原生事件等信息生成相应的合成事件&lt;/li&gt;
  &lt;li&gt;extractEvents函数的执行过程中会遍历所有该原生事件相关的事件插件(EventPlugin),让每一个EventPlugin生成对应的合成事件,并将所有合成事件放在一个数组里&lt;/li&gt;
  &lt;li&gt;EventPlugin在生成合成事件的过程中收集所有用户编写的事件监听回调(比如1.1中的handleClick）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DachiCoding/study-notes/blob/master/images/react-event-study/img05.png?raw=true&quot; alt=&quot;alt&quot; /&gt;
这一阶段完成了从原生事件触发到生成合成事件（收集需要执行的回调函数）的工作.&lt;/p&gt;

&lt;p&gt;2.3 执行回调阶段
EventPluginHub在获得了某一原生事件相关的一个或多个合成事件后，开始执行这些事件的回调，其具体流程如下&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;EventPluginHub对合成事件数组执行runEventsInBatch方法,该方法的作用是处理合成事件数组&lt;/li&gt;
  &lt;li&gt;runEventsInBatch会对合成事件队列里的每一个合成事件执行executeDispatchesAndReleaseTopLevel,这个方法会先调用EventPluginUtils模块的executeDispatchesInOrder,并且在之后将合成事件释放(除非用户手动选择将该合成事件持久化)&lt;/li&gt;
  &lt;li&gt;EventPluginUtils的executeDispatchesInOrder会找到所有监听这个事件的React元素(FiberNode)和回调(比如handleClick),然后执行每一个回调.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DachiCoding/study-notes/blob/master/images/react-event-study/img06.png?raw=true&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此React事件系统完整的处理了一个事件监听,用户编写的事件监听回调执行完毕.&lt;/p&gt;

&lt;p&gt;重新快速梳理一遍React事件系统的工作流程就是&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ReactDOMFiberComponent模块初始化Virtual DOM节点的属性&lt;/li&gt;
  &lt;li&gt;ReactBrowserEventEmitter/ReactDOMEventListener/EventListener模块会对用户设置的事件进行监听&lt;/li&gt;
  &lt;li&gt;原生事件触发&lt;/li&gt;
  &lt;li&gt;ReactDOMEventListener将原生事件交给EventPluginHub处理&lt;/li&gt;
  &lt;li&gt;EventPluginHub让各个相关的EventPlugin生成合成事件&lt;/li&gt;
  &lt;li&gt;EventPluginHub让合成事件队列里的各个合成事件执行相应的回调&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;三、React事件系统思考题&lt;/p&gt;

&lt;p&gt;3.1 React事件和原生事件回调的执行顺序&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Q: 如果给一个button设置了onClick回调handleClick1, 又手动给这个button的点击事件手动设置addEventListener handleClick2,如果点击这个按钮，哪个回调先执行?&lt;/li&gt;
  &lt;li&gt;A: handleClick2先执行,handleClick1再执行,因为React在Document层级冒泡阶段监听click事件,所以当原生事件在button上先触发handleClick2上再冒泡到document上,然后React再启动自有的事件处理流程.&lt;/li&gt;
  &lt;li&gt;追加问题:如果是blur,focus等不冒泡的事件,比如给input设置onBlur,又给input手动添加blur的eventListener,当事件触发时哪个先执行?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3.2 阻止冒泡的处理
Q: 如图有如下组件, onBtnClick里调用了合成事件的阻止冒泡方法stopPropagation,那么图中button的母元素div绑定的两个事件回调onDivNativeClick和onDivClick是否会执行?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DachiCoding/study-notes/blob/master/images/react-event-study/img07.png?raw=true&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;想知道答案的同学可以去&lt;a href=&quot;https://codesandbox.io/s/1q8n95oovq&quot;&gt;https://codesandbox.io/s/1q8n95oovq&lt;/a&gt;试试&lt;/p&gt;

&lt;p&gt;3.3 React在Document层级监听事件，如果有多个元素(不在同一条子树上)绑定同一事件，React如何准确触发回调?
在2.2（6）步骤中,会调用accumulateTwoPhaseDispatches函数,这个函数会模拟事件的捕获/冒泡流程，收集virtual dom中事件触发的元素到根元素之间路径上每个元素针对这个事件的回调，只有在这里收集到的回调才会稍后被执行，所以不存在会误触发其他监听同样事件元素的回调.&lt;/p&gt;

&lt;p&gt;以上是此次React事件系统的研究，为了研究React内部实现的工程细节所以讨论的粒度较细,篇幅相对较长,欢迎各位同学提出问题或者对文章的意见，谢谢阅读！&lt;/p&gt;

&lt;p&gt;四、参考资料&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;React官网: 事件处理 https://reactjs.org/docs/handling-events.html&lt;/li&gt;
  &lt;li&gt;React官网: 合成事件 https://reactjs.org/docs/events.html&lt;/li&gt;
  &lt;li&gt;React源码: https://github.com/facebook/react&lt;/li&gt;
  &lt;li&gt;https://levelup.gitconnected.com/how-exactly-does-react-handles-events-71e8b5e359f2&lt;/li&gt;
  &lt;li&gt;https://www.kirupa.com/react/events_in_react.htm&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 19 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2018/04/19/React%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0.html</link>
        <guid isPermaLink="true">http://dachicj.com/2018/04/19/React%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0.html</guid>
        
        
      </item>
    
      <item>
        <title>2018-04-19 Airbnb Javascript规范总结</title>
        <description>&lt;h2 id=&quot;airbnb-javascript-style-guide&quot;&gt;Airbnb JavaScript Style Guide&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;对Airbnb的JavaScript规范学习了一番、并对其中的一些具体细则进行了一些研究&lt;/li&gt;
  &lt;li&gt;文档地址：https://www.kancloud.cn/kancloud/javascript-style-guide&lt;/li&gt;
  &lt;li&gt;语法规范的核心：代码安全性 &amp;gt; 代码可读性 &amp;amp; 代码维护性 &amp;gt; 代码性能&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;01 类型&lt;/h2&gt;
&lt;h3 id=&quot;section-1&quot;&gt;基本类型&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;String&lt;/li&gt;
  &lt;li&gt;Number&lt;/li&gt;
  &lt;li&gt;Boolean&lt;/li&gt;
  &lt;li&gt;null&lt;/li&gt;
  &lt;li&gt;undefined&lt;/li&gt;
  &lt;li&gt;Symbol(ES6新增)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;复制类型&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Object&lt;/li&gt;
  &lt;li&gt;Array&lt;/li&gt;
  &lt;li&gt;Function&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;02 引用&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;尽量用const&lt;/li&gt;
  &lt;li&gt;不能避免更改变量的情况下用let&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;03 对象&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;使用字面值创建对象&lt;/li&gt;
  &lt;li&gt;用constructor创建复用对象，用字面值创建数据集合体&lt;/li&gt;
  &lt;li&gt;使用字面值来创建字符串’‘、数组[]和对象{}更简洁和易读
    &lt;blockquote&gt;
      &lt;p&gt;关于字面值 vs 构造函数的讨论: https://www.codecademy.com/en/forum_questions/5100b32aa51d4373ea000d2d
https://stackoverflow.com/questions/251402/create-an-empty-object-in-javascript-with-or-new-object/252110#252110&lt;/p&gt;
      &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;key1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;key2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;创建动态属性时用可被计算属性: 可以在同一个地方定义所有属性
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;getKeyName&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getKeyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;使用对象简写,并且简写和非简写属性分开
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;atom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;addValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;atom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lukeSkywalker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Luke Skywalker'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;captainKirk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Captain Kirk'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;lukeSkywalker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;captainKirk&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;starWarLatestEpisode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'The Last Jedi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;starTrekLatestEpisode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Beyond'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-5&quot;&gt;04 数组&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;使用…复制数组&lt;/li&gt;
  &lt;li&gt;复制数组的方法有几种，目前最快的方法是loop或者slice(取决于浏览器),…的性能不是最快的,详情可读 https://stackoverflow.com/questions/3978492/javascript-fastest-way-to-duplicate-an-array-slice-vs-for-loop&lt;/li&gt;
  &lt;li&gt;用Chrome浏览器测试loop,slice和…的速度分别是47, 18, 135(单位ms), slice性能最好，语法也比较简洁，不知道将来JS引擎对…是否会优化.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itemsCopy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-6&quot;&gt;05 解构&lt;/h2&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// example1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// example2&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 如果要解构的对象属性很多我觉得还是example1更适合&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-7&quot;&gt;06 字符串&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;字符串超过80个字符应该用字符串连接号换行
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//性能最好，可读性最差&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'adadapodakpd...'&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;//性能居中, 可读性较差&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'asdada \
dasdad \
fiokio'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//性能最差，可读性最好，由于长字符处理场景少，这种性能问题可以让位于可读性&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'part 1'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'part 2'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'part 3'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-8&quot;&gt;07 函数&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;不要在一个非函数block里声明函数(if,while等)&lt;/li&gt;
  &lt;li&gt;不要把任何函数参数命名为arguments
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argumnets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//VERY BAD&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;good&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;使用…来代表参数
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;happy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;直接设定参数默认值
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hanldeThings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}){&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h2 id=&quot;section-9&quot;&gt;08 箭头函数&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;一个箭头函数能用一行写完可以省略括号和return
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-10&quot;&gt;09 构造函数&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;使用class, 避免操作prototype&lt;/li&gt;
  &lt;li&gt;使用extends来继承&lt;/li&gt;
  &lt;li&gt;在方法中返回this实现链式调用
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Jedi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;jump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jumping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;swingBlade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;swingBlade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastJedi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Jedi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;lastJedi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;swingBlade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-11&quot;&gt;10 模块&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;使用import/export&lt;/li&gt;
  &lt;li&gt;分离import/export
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;es6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./someModule'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;es6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;iterator&quot;&gt;11 Iterator&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;使用reduce/map替代for-of
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//reduce参数: array.reduce((累加变量,当前值，当前值index,数组),初始值)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-12&quot;&gt;12 属性&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;通过变量访问属性时使用[]
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;luke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-13&quot;&gt;13 变量&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;将const,let声明分开&lt;/li&gt;
  &lt;li&gt;变量声明和赋值的地方尽量合理(避免不必要的声明)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-14&quot;&gt;14 提升&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;变量: var的声明会被提升至顶部(赋值不会), let/const的声明、赋值都不会提升&lt;/li&gt;
  &lt;li&gt;命名的函数表达式变量名会提升，函数名/函数体都不会提升
```javascript
console.log(bianliang); //undefined（变量名提升)
bianliang(); //TypeError, 这个变量不是函数（函数体没有提升)
hanshu(); //ReferenceError, 函数不存在(函数名没有提升)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;var bianliang = function hanshu(){
    //do sth
}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ 函数声明：函数名、函数体都会提示
```javascript
hanshu(); // =&amp;gt; Hello

hanshu function(){
    console.log('Hello')
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-15&quot;&gt;15 比较&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;if (object): true&lt;/li&gt;
  &lt;li&gt;if (undefined ): false&lt;/li&gt;
  &lt;li&gt;if (null ): false&lt;/li&gt;
  &lt;li&gt;if (boolean): 由其真实boolean值决定&lt;/li&gt;
  &lt;li&gt;if (number): +0/-0/NaN为false,其他为true&lt;/li&gt;
  &lt;li&gt;if (string): ‘‘为false&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-16&quot;&gt;16 代码块&lt;/h2&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//good&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//bad&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-17&quot;&gt;17 注释&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;单行注释之上插入空行&lt;/li&gt;
  &lt;li&gt;使用FIXME, TODO增加注释准确性&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-18&quot;&gt;18 空格&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;两个空格作为缩进&lt;/li&gt;
  &lt;li&gt;花括号前放一个空格
```javascript
function test() {
  //do sth
}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;dog.set(‘attr’, {
    name: ‘Wangcai’
})&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ if,while的小括号前加一个空格
```javascript
if (condition) {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;使用空格隔开运算符&lt;/li&gt;
  &lt;li&gt;文件末尾插入空行或者换行符
    &lt;blockquote&gt;
      &lt;p&gt;https://stackoverflow.com/questions/729692/why-should-text-files-end-with-a-newline 许多程序需要一个换行符才能认为最后一行是完整的一行&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;链式调用时使用缩进&lt;/li&gt;
  &lt;li&gt;代码块末和新语句前插入空行&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-19&quot;&gt;19 逗号&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;最后一行需要
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;heros&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'Batman'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'Badman'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-20&quot;&gt;20 分号&lt;/h2&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//立即执行函数前后加上分号，避免压缩时出现问题&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//do something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-21&quot;&gt;21 类型转换&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;字符串
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalScore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reviewScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;数字
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;布尔
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-22&quot;&gt;22 命名&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;导出对象和文件名一样&lt;/li&gt;
  &lt;li&gt;驼峰命名对象、示例、参数
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//makeCheckBox.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;makeCheckBox&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeCheckBox&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;帕斯卡命名构造函数和类（大写驼峰)
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//CheckBox.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckBox&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckBox&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;使用 _ 开头命名私有属性&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-23&quot;&gt;24 事件&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;给事件增加hash值
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'listingUpdate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listingId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'listingUpdated'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//do something with data.listingId&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 19 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2018/04/19/Airbnb-JS%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93.html</link>
        <guid isPermaLink="true">http://dachicj.com/2018/04/19/Airbnb-JS%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93.html</guid>
        
        
      </item>
    
      <item>
        <title>2018-04-01 JS基础知识补习</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;学习材料&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;本周复习了一些JS语言的基础概念, 学习材料: &lt;a href=&quot;https://github.com/mqyqingfeng/Blog&quot;&gt;JavaScript深入系列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;原型 &amp;amp; 原型链&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Prototype: 构造函数指向的原型对象&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__proto__&lt;/code&gt;: 对象实例指向的原型对象，沿着__proto__一路调用即为原型链(__proto__其实是getter/setter,也可以用Object.getPrototypeOf()来获取原型)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//构造函数&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//对象实例&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//只有函数才有prototype, prototype指向调用该构造函数创建的实例的原型&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Kevin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//__proto__, 对象的属性，指向该对象的原型&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;词法作用域和动态作用域&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;词法：函数的作用域在函数定义的时候就决定了&lt;/li&gt;
  &lt;li&gt;动态：函数的作用域是在函数调用的时候才决定&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-3&quot;&gt;执行上下文栈&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;每个函数执行时都有一个执行上下文：Execution context stack，&lt;/li&gt;
  &lt;li&gt;ECStack 最底部永远有个 globalContext&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funcTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//do something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funcMiddle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;funcTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funcBottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;funcMiddle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;funcBottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//执行时的ECS是&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;funcTop&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;execution&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:最后一个&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;进&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ECS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;第一个&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;funcMiddle&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;execution&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;funcBottom&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;execution&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;第一个&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;进&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ECS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;最后一个&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;globalContext&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：永远在底层&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;variable-object&quot;&gt;变量对象 Variable Object&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;上下文包含三个属性: 变量对象VO,作用域链(Scope Chain),this&lt;/li&gt;
  &lt;li&gt;变量对象: 存储在上下文中定义的变量和函数声明&lt;/li&gt;
  &lt;li&gt;全局上下文的变量对象：全局对象(DOM上为window,node上为global)是JS全局属性、函数的占位符，可以通过全局对象访问全局属性和函数。&lt;/li&gt;
  &lt;li&gt;函数上下文的变量对象: activation object(AO), 在进入函数上下文时创建。包括函数的形参，内部的函数声明、内部的变量声明，并且在代码执行阶段会修改对象的属性值。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-4&quot;&gt;作用域链&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;在查找变量时，会从当前的变量对象里查找，如果没有找到就会查找父级上下文的变量对象，直到全局对象&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascrip&quot;&gt;function Outter() {
    function Inner() {
    }
}

//外层函数的作用域链指向全局对象
Outter.[[SCOPE] = [
    globalContext.VO
]

//内层函数的作用域链先指向Outter函数的活动对象、其次再是全局对象
INNER.[[SCOPE] = [
    OutterContext.AO,
    globalContext.VO
]
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Sun, 01 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2018/04/01/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://dachicj.com/2018/04/01/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>2018-03-11 [翻译]前端工程师手册2018回顾&amp;展望部分</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;学习材料&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;本周看到了这个前端工程师手册2018，觉得2017年回顾和2018年展望很有意思，稍稍翻译一下，个中观点是作者的主观意见，请各位读者加以甄别参考。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1.&lt;a href=&quot;https://frontendmasters.com/books/front-end-handbook/2018/&quot;&gt;前端工程师手册2018/Front-End Developer Handbook 2018&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;part-1-recap-of-front-end-development-in-2017-2017&quot;&gt;Part 1 Recap of Front-end Development in 2017 回顾2017&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;=&amp;gt; HTML 5.2 版本完成&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 2017年从市场的接纳程度和流行程度来说是Vue.js很好的一年&lt;/li&gt;
  &lt;li&gt;=&amp;gt; HTML &amp;amp; CSS开发者和Web App开发者的分别已经很明显&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 前端工程师开发Web应用的技术在不断的变好和变坏(意指工具越来越多，生态越来越复杂)&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 有更多的工具/框架和主流开发框架竞争[React,Vue,Angular],其中包括[Moon, Marko, Hyperapp, Quasar Framework, POI, frint, BunnyJS, jsblocks, Sapper, Stimulus, Choo]&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 过去的在线js编辑器[jsbin,jsfiddle]进化成[StackBliz,codeSandbox]这样的工具，使得在线分享Web App变得十分简单&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 有越来越多的框架致敬或者采纳了React的理念[preact, inferno, nerv, dva, and rax.] Rax是阿里开发的一套在Web/Weex上跨平台的兼容React语法的开发框架&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 语法速查集成网站&lt;a href=&quot;https://devhints.io/&quot;&gt;devhints.io.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;=&amp;gt; “正确”搭建一个项目的方式有的时候因人而异，Create-React-App(facebook官方出品的React项目搭建工具)具有可以移除消除项目配置的功能&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 大多数开发者会一起使用好的code editor, eslint以及prettier使得编程更快、更简易、更愉悦。&lt;/li&gt;
  &lt;li&gt;=&amp;gt; CSS Flexbox和Grid都获得了浏览器的支持，开发者现在开始关注这两个布局方法&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 终于有了&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md&quot;&gt;无界面chrome&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 有更好的&lt;a href=&quot;https://shoelace.style/&quot;&gt;CSS库&lt;/a&gt;来处理一些CSS的新特性&lt;/li&gt;
  &lt;li&gt;=&amp;gt; CSS有一些&lt;a href=&quot;http://ryanogles.by/css/javascript/2017/05/25/the-state-of-css.html&quot;&gt;巨大的变化&lt;/a&gt;在发生&lt;/li&gt;
  &lt;li&gt;=&amp;gt; JavaScript的&lt;a href=&quot;https://sdras.github.io/array-explorer/&quot;&gt;数组&lt;/a&gt;和对象检测工具出现了&lt;/li&gt;
  &lt;li&gt;=&amp;gt; &lt;a href=&quot;https://brave.com/&quot;&gt;Brave&lt;/a&gt;浏览器是最安全的浏览器&lt;/li&gt;
  &lt;li&gt;=&amp;gt; PhantomJS不再维护，headless chrome和puppeteer登场&lt;/li&gt;
  &lt;li&gt;=&amp;gt; Prettier逐渐变为开发中必备工具&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 很多开发者开始对代码进行静态检查，比如TypeScript或者是Flow, 但是这会带来更多的复杂度，目前这还是主观趋势。&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 静态网站开发工具也逐渐进入开发者的视野&lt;/li&gt;
  &lt;li&gt;=&amp;gt; Web Components依然不火，以后也未必能火&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 许多人现在在开发时开始转向CSS In JS&lt;/li&gt;
  &lt;li&gt;=&amp;gt; Yarn的一个价值是给npm带来了竞争感&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 许多人开始意识到组件架构和原子化设计之间的关系&lt;/li&gt;
  &lt;li&gt;=&amp;gt; ES模块将变为浏览器实现的一部分，或者得使用webpack这样的工具来打包&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 一首凉凉送给MVC框架&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 独立设计React组件的工具出现了[Bluekit, Storybook, React Styleguidist, bit.]&lt;/li&gt;
  &lt;li&gt;=&amp;gt; HTML preloading功能出现了&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 所有主流浏览器现在都支持WebAssembly&lt;/li&gt;
  &lt;li&gt;=&amp;gt; Webpack统治了市场，parcel这样的竞争者出现了&lt;/li&gt;
  &lt;li&gt;=&amp;gt; React 16(Fiber)发布了&lt;/li&gt;
  &lt;li&gt;=&amp;gt; React目前是构造UI最流行的框架&lt;/li&gt;
  &lt;li&gt;=&amp;gt; React更改了开源协议[React的新闻还真是多]&lt;/li&gt;
  &lt;li&gt;=&amp;gt; GraphQL在17年逐渐变得火爆&lt;/li&gt;
  &lt;li&gt;=&amp;gt; Facebook继续在开发领域添砖加瓦(prepack.io,提升js性能的打包工具)&lt;/li&gt;
  &lt;li&gt;=&amp;gt; ECMA-262 editon 8 （JavaScript标准)发布了&lt;/li&gt;
  &lt;li&gt;=&amp;gt; React Router终于稳(chong)定(xie)了&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 所有主流浏览器都支持ES2015(ES6)了&lt;/li&gt;
  &lt;li&gt;=&amp;gt; Async JS函数开始受到越来越多的关注，因为浏览器支持了&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 移动开发依然很难，有些人开始推崇PWA&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;part-2-in-2018-expect-2018&quot;&gt;Part 2 In 2018 expect… 展望2018年&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;=&amp;gt; React在接下来的几年里都会持续火&lt;/li&gt;
  &lt;li&gt;=&amp;gt; GraphQL也许会替代很多REST API&lt;/li&gt;
  &lt;li&gt;=&amp;gt; Web应用会变得更像原生应用，具备线下模式&lt;/li&gt;
  &lt;li&gt;=&amp;gt; HTML5.3 is coming&lt;/li&gt;
  &lt;li&gt;=&amp;gt; &lt;a href=&quot;https://medium.com/@ericsimons/introducing-turbo-5x-faster-than-yarn-npm-and-runs-natively-in-browser-cc2c39715403&quot;&gt;turbo&lt;/a&gt;是一个值得关注的npm客户端，非常快&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 学会使用CSS transform 3d, CSS transition, CSS flexbox, CSS filters ,CSS grid&lt;/li&gt;
  &lt;li&gt;=&amp;gt; JavaScript的使用场景将会越来越多&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 离Web Assembly大行其道还有一段距离，还需要好的工具&lt;/li&gt;
  &lt;li&gt;=&amp;gt; PostCSS, CSSnext, CSS in JS将会取代css预处理器&lt;/li&gt;
  &lt;li&gt;=&amp;gt; SPA + 服务器端渲染的架构正在渐渐发展(pjax: pushState + ajax)&lt;/li&gt;
  &lt;li&gt;=&amp;gt; PWA也许会火，也许(永远)不会，起码不是以目前的形式&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 建立在人工智能和神经网络的聊天机器人也许会促进线上沟通的，谁也不知道会走向何方&lt;/li&gt;
  &lt;li&gt;=&amp;gt; Vue也许会超越Angular&lt;/li&gt;
  &lt;li&gt;=&amp;gt; AR/AV,AI会持续发展(js不也有深度学习框架了么～)&lt;/li&gt;
  &lt;li&gt;=&amp;gt; JavaScript Symbol和Generator估计不会进入程序员视野&lt;/li&gt;
  &lt;li&gt;=&amp;gt; Webpack4将会因为竞争者的出现变得更好&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 业界将会不停寻找树形UI组件的理想CSS解决方案&lt;/li&gt;
  &lt;li&gt;=&amp;gt; 状态管理这一块逐渐稳定下来，mobx也许会大放异彩&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;译者注：根据作者的观点，前端界将在接下来的日子里继续出现新的变化，但同时一些领域开始逐渐稳定，比如MVVM框架[React,Vue,Angular], 围绕React生态出现了一些辅助工具和继承者，另一方面CSS将出现一些变化[CSS In JS, CSSnext], PWA可能不会太火但值得关注，无论如何随时随地保持学习，与大家共勉。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 11 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2018/03/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://dachicj.com/2018/03/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>2017-11-05 技术学习笔记</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;学习材料&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://hacks.mozilla.org/2017/08/inside-a-super-fast-css-engine-quantum-css-aka-stylo/&quot;&gt;https://hacks.mozilla.org/2017/08/inside-a-super-fast-css-engine-quantum-css-aka-stylo/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/&quot;&gt;https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/&lt;/a&gt;
本周继续承接&lt;a href=&quot;http://dachicj.com/2017/10/22/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html&quot;&gt;上一篇文章&lt;/a&gt;读的新一代火狐浏览器内核CSS引擎介绍文章,&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;part-1-quantum-css&quot;&gt;Part 1 Quantum CSS&lt;/h2&gt;

&lt;h3 id=&quot;quantum-csscss&quot;&gt;Quantum CSS对CSS渲染的优化&lt;/h3&gt;
&lt;p&gt;在用户浏览网页的时候，CSS渲染无时不刻的发生，首次加载，用户的任何操作，都会导致重新CSS的重新渲染。Quantum CSS采用了混合多种策略对CSS渲染进行优化。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;平行计算&lt;/h3&gt;
&lt;p&gt;随着多核CPU的普及，那么将样式计算分摊给不同的CPU内核似乎是个非常合理的思路，但是将不同的样式分拆给不同的CPU核其实没那么简单，因为DOM树有可能存在两边节点数目差距较大的情况，这样计算工作的分配就会不那么公平，为了解决这个问题，Quantum CSS将不同的DOM节点分配到不同的队列里，每一个CPU核在计算完分配给自己的计算任务后，会去其他的队列查看是否还有没完成的计算任务，这样甚至不需要提前计算如何分配样式的计算任务。&lt;/p&gt;

&lt;p&gt;但是由于平行计算和CSS样式计算的复杂性，这种工程设计很容易引入各种Bug以及一种叫&lt;a href=&quot;https://hacks.mozilla.org/2017/06/avoiding-race-conditions-in-sharedarraybuffers-with-atomics/#data-race&quot;&gt;Data races&lt;/a&gt;的问题，火狐的工程师们利用了Rust语言的特性避免了这类问题的发生。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;用规则树加速样式再计算&lt;/h3&gt;
&lt;p&gt;由于困这段没太看懂, 下次再研究一下…&lt;/p&gt;

&lt;h3 id=&quot;style-sharing-cache&quot;&gt;用样式共享缓存(Style sharing cache)加速首次加载样式计算&lt;/h3&gt;
&lt;p&gt;一个网页可能有成千上百DOM节点，并且其中大多数节点的部分样式都是一致的，没有优化的CSS引擎可能要重复无数次的相同计算，如果将相同元素的相同样式指向同一个样式对象，无疑可以为CSS引擎节省很多的无效开销，而Safari和Chrome浏览器使用了样式共享缓存。&lt;/p&gt;

&lt;p&gt;样式共享缓存在计算节点的样式时，会检查几点来确认是否某些元素可以共享样式：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;两个节点是否有相同的id和class&lt;/li&gt;
  &lt;li&gt;两个节点的母节点是否指向相同的样式对象，如果是的话，这些节点继承的属性也应指向相同的地方。&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用样式共享缓存无疑可以节省内存开销并且提高计算的速度。&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2017/11/05/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://dachicj.com/2017/11/05/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>2017-10-22 技术学习笔记</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;学习材料&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://hacks.mozilla.org/2017/08/inside-a-super-fast-css-engine-quantum-css-aka-stylo/&quot;&gt;https://hacks.mozilla.org/2017/08/inside-a-super-fast-css-engine-quantum-css-aka-stylo/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/&quot;&gt;https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这周暂时放下CSS In Depth的学习，因为看到了来自Firefox浏览器工程师团队的两篇文章，觉得真的很不错，即介绍了火狐下一代浏览器内核的实现，又介绍了浏览器的工作流程，建议前端同学都可以看看（虽然是英文的，但是有很多图片，有助于阅读理解),可以加深对浏览器机制的理解。&lt;/p&gt;

&lt;h2 id=&quot;part-1-quantum-css&quot;&gt;Part 1 Quantum CSS&lt;/h2&gt;

&lt;h3 id=&quot;quantum-css&quot;&gt;Quantum CSS简介&lt;/h3&gt;
&lt;p&gt;Quantum，也就是下一代火狐浏览器的内核，大致由Quantum DOM, Quantum CSS, Quantom Compositor, Quantum Render几个部分组成，其中，Quantum CSS和Quantum Render是解析、渲染网页最为核心的部分，学习材料里的第一个首先介绍了Quantum CSS， 作者首先介绍了Quantum CSS快速的几个原因&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Parallel computing: 平行计算, Quantum CSS新技术&lt;/li&gt;
  &lt;li&gt;Rule tree: Firefox原有技术，具体内容尚不明&lt;/li&gt;
  &lt;li&gt;Style sharing cache: 来自Chrome和Safari,估计是来自WebKit的技术。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;css&quot;&gt;CSS引擎的职责&lt;/h3&gt;
&lt;p&gt;CSS引擎是浏览器渲染引擎的一部分，渲染引擎的工作就是把前端工程师辛辛苦苦写好的HTML &amp;amp; CSS转化为屏幕上的每一个像素,那么这个转化的过程可以大致分为五个步骤。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;解析：将HTML解析为DOM(Document Object Model)，这是一个网页在内存中的虚拟对象，在React等技术出现前，以前的前端程序员都要依靠操作DOM来动态的改变网页的结构,这一步决定网页里应该有什么元素（标题，文字，按钮，等等等等)&lt;/li&gt;
  &lt;li&gt;样式: 计算出每个DOM中元素的样式应该是什么样的，每一个元素应该长成什么样子。&lt;/li&gt;
  &lt;li&gt;布局: 前端程序员肯定熟悉Box模型，在这一个步骤里，渲染引擎将计算出每一个元素自身的盒模型(Box)的尺寸和位置。&lt;/li&gt;
  &lt;li&gt;绘制：绘制各元素的Box, 绘制的过程可以发生在很多图层，这样使得修改一个图层而不影响其他图层变的可能。（在渲染过程中图层代表什么目前笔者尚不明确。)&lt;/li&gt;
  &lt;li&gt;组合：对各个图层应用某些特定属性(比如CSS transforms)，将所有图层组合在一起并呈现到显示器上。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;css-1&quot;&gt;CSS引擎具体工作流程&lt;/h3&gt;
&lt;p&gt;当开始计算样式前，CSS引擎已经拥有了&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;DOM树&lt;/li&gt;
  &lt;li&gt;样式规则列表
CSS引擎会遍历每一个DOM节点，计算出该节点的样式，计算出这个节点的&lt;strong&gt;每一个&lt;/strong&gt;CSS属性的值，即使stylesheet没有设置这个属性。为了完成这项工作，CSS引擎需要&lt;/li&gt;
  &lt;li&gt;selector matching: 寻找那些设置了值的样式属性&lt;/li&gt;
  &lt;li&gt;cascade: 找不到设定的属性，就寻找继承或者默认的属性, 这部分的相关内容可以在上上篇博文里找到:)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;selector-matching&quot;&gt;Selector matching&lt;/h3&gt;
&lt;p&gt;CSS引擎会对照样式表，将对应DOM节点的样式加载到一个列表上，由于一个CSS属性可以match多个值，所以需要根据优先级规则来决定某个id/class/tag的样式应该应用哪一个值,这个规则的设定也可以参考CSS In Depth第一章的学习笔记。&lt;/p&gt;

&lt;h3 id=&quot;cascade&quot;&gt;Cascade&lt;/h3&gt;
&lt;p&gt;当完成了selector matching后，某个id/class/tag对应的DOM node的样式仍然存在空缺，这时候需要寻找该属性的继承或者默认值，这样每一个DOM node的全部CSS属性就完成了计算。&lt;/p&gt;

&lt;h3 id=&quot;style-struct-sharing&quot;&gt;Style struct sharing&lt;/h3&gt;
&lt;p&gt;上面的文字存在一定误导成分啊哈，CSS总共有几百个属性，如果都要计算的话那估计很快就内存不足了，CSS引擎讲将这些值存储到一个叫style struct的对象里，这样DOM节点的样式可能指针指到这些对象上，拥有相似属性的DOM节点（比如兄弟节点）可以将样式都指到相同的style struct上；很多时候父节点会让很多子节点继承属性，他们之间也可以共享style struct。&lt;/p&gt;

&lt;h3 id=&quot;quantum-css-1&quot;&gt;Quantum CSS是如何优化上述过程的&lt;/h3&gt;
&lt;p&gt;我知道写到快干货的地方停了不太合适，不过后面篇幅有点长，等下周继续学习更新啊哈哈哈哈…Zzzzzz…&lt;/p&gt;

</description>
        <pubDate>Sun, 22 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2017/10/22/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://dachicj.com/2017/10/22/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>2017-10-15 前端学习笔记</title>
        <description>&lt;h3 id=&quot;css-in-depth-chapter-01--02&quot;&gt;学习材料： CSS In Depth Chapter 01 &amp;amp; 02&lt;/h3&gt;

&lt;h2 id=&quot;chapter-01&quot;&gt;Chapter 01&lt;/h2&gt;

&lt;h3 id=&quot;shorthand&quot;&gt;1.4 Shorthand&lt;/h3&gt;

&lt;h4 id=&quot;font--fontinitial-value-&quot;&gt;font:  会将font相关的属性都设置为initial value(默认值), 比如&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.title {
  font: 32px Helvetica, Arial, sans-serif; # 会将font-weight设为normal
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;padding-paddingtop-right-bottom-left-paddingtoppadding-leftpaddingrightpadding&quot;&gt;padding: 设置padding的顺序分别为top, right, bottom, left（顺时针), 如果底部的padding缺失，会使用top的padding, 如果left的padding缺失会使用right的padding.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.example {
	padding: 1px 1px 1px 1px; # 完整
	padding: 1px 2px 1px; # 等于1px 2px 1px 2px;
	padding: 1px 2px; # 等于1px 2px 1px 2px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;background-position-box-shadow-text-shadow--horizontalvertical&quot;&gt;background-position, box-shadow, text-shadow: 这几个属性只有两个方向, 横向(horizontal)和纵向(vertical)&lt;/h4&gt;

&lt;h2 id=&quot;chapter-02-working-with-relative-units&quot;&gt;Chapter 02 Working with relative units&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;第二章主要讲解&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;使用相对单位时的种种变化&lt;/li&gt;
  &lt;li&gt;理解ems和rems,并且不被整疯&lt;/li&gt;
  &lt;li&gt;使用viewport相关单位&lt;/li&gt;
  &lt;li&gt;CSS变量&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;绝对单位和相对单位&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;绝对单位:比如5px就是绝对单位&lt;/li&gt;
  &lt;li&gt;相对单位: em和rem是相对单位，在不同的设备上含义不同&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;powerful&quot;&gt;2.1 相对单位很大力(Powerful)&lt;/h3&gt;
&lt;p&gt;早起的程序开发，程序员面对的都是一成不变的屏幕尺寸，比如一个程序的窗口就是确切的400*300像素，Web时代时，情况有所变化，因为浏览器的窗口会变化，每一次浏览器尺寸的变化，都需要重新计算和引用CSS值才能重新渲染页面，在很长一段时间内，网页设计师都追求”完美像素”风格的设计，他们会创建一个800像素左右宽的容器，然后在里面搞事情，这种设计有点像以前的桌面开发。&lt;/p&gt;

&lt;p&gt;但是随着显示器分辨率的提高（800-&amp;gt;1024-&amp;gt;1280)，这种Pixel-Perfect的开发方式不灵了，然后没几年智能手机又来了，所以设计师需要停止“所有用户都能获得完全一致的使用体验”这种幻觉，这种固定像素尺寸的设计也将被舍弃了。顺应时代的潮流CSS也提出了新的抽象，那就是相对单位。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CSS的各种单位，除了最广为人知的pixel,CSS还有mm(millimeter), cm(entimeter),in(inch),pt(point)，pc(pica) (*笔者注:我从来都用过这些), 这些单位的转换关系是1inch = 25.4mm =2.54cm =6pica = 72pt =96px&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 15 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2017/10/15/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://dachicj.com/2017/10/15/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>2017-09-24 本周前端学习笔记</title>
        <description>&lt;h3 id=&quot;css-in-depth-chapter-01&quot;&gt;学习材料： CSS In Depth Chapter 01&lt;/h3&gt;

&lt;p&gt;本周继续学习CSS In Depth第一章的剩余部分&lt;/p&gt;

&lt;h3 id=&quot;inheritance&quot;&gt;1.2 Inheritance&lt;/h3&gt;
&lt;p&gt; 
当一个元素没有设置的样式，它将从它的母元素获得样式。
注意inheritance和此前讨论的cascade概念并不相同，也并不是
所有的样式都会被继承，被继承的属性包括:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;字体类属性: color, font, font-family, font-size, font-weight, font-variant等&lt;/li&gt;
  &lt;li&gt;列表类属性: list-style, list-style-type, list-style-position,list-style-image&lt;/li&gt;
  &lt;li&gt;表格边框属性: border-collapse, border-spacing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;inherit--initial&quot;&gt;1.3 Inherit &amp;amp; Initial&lt;/h3&gt;
&lt;p&gt;有两种特殊的CSS值可以应用到任何CSS属性上, inherit和initial.
 &lt;/p&gt;
&lt;h4 id=&quot;inherit&quot;&gt;inherit&lt;/h4&gt;
&lt;p&gt;有时你希望某个元素可以继承母元素的样式而不是使用默认定义的样式，那就是
使用inherit的时候.
 &lt;/p&gt;
&lt;h4 id=&quot;initial&quot;&gt;initial&lt;/h4&gt;
&lt;p&gt;有时候你想取消某些元素的样式，你可以使用initial这个值，使得某个属性被设定为默认的属性，比如&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;footer {
 color: initial;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;等价于&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;footer {
 color: black;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;有时initial值对于某些属性并不起作用，是因为这些属性没有默认值，比如border-width或者padding, 但是赋予他们initial的值完全合法。&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2017/09/24/%E6%9C%AC%E5%91%A8%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://dachicj.com/2017/09/24/%E6%9C%AC%E5%91%A8%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>2017-09-17 本周前端学习笔记</title>
        <description>&lt;h3 id=&quot;css-in-depth-chapter-01&quot;&gt;学习材料： CSS In Depth Chapter 01&lt;/h3&gt;

&lt;p&gt;因为一直想要巩固CSS基础和对于CSS的理解，碰巧找到了一本不错的书&lt;a href=&quot;https://www.manning.com/books/css-in-depth&quot;&gt;CSS In Depth&lt;/a&gt;, 本周阅读了其免费的第一章
 &lt;/p&gt;
&lt;h3 id=&quot;chatper-01-cascade-specificity-inheritance&quot;&gt;Chatper 01 Cascade(瀑布流), Specificity(特选性）, Inheritance(继承)&lt;/h3&gt;
&lt;p&gt;我一直都很好奇CSS的Cascade（字面意义是瀑布)是什么意思, 为什么要用瀑布来形容样式? 在看过这一章后，我对Cascade的理解就是，同一个元素可以应用多种样式(甚至是冲突的样式)，而CSS要根据几个原则来解决冲突使得某个元素的样式可以从最宽泛的设置一直滑落到最适合它的范围(嗯，我知道这么强行解释有些尴尬不过CSS的创始人是&lt;a href=&quot;http://www.wiumlie.no/2006/phd/#cascading&quot;&gt;这么说&lt;/a&gt;的所以你们就忍了吧)&lt;/p&gt;

&lt;p&gt;好的，那么我们来看看当一个元素被应用了多种样式后应该如何解决样式的合并和冲突。&lt;/p&gt;

&lt;h3 id=&quot;css&quot;&gt;0.如何解决CSS的冲突&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;来源： 样式从何而来 (higher priority origin)&lt;/li&gt;
  &lt;li&gt;范围： 是否有inline样式 (应用inline样式)&lt;/li&gt;
  &lt;li&gt;选择器：选择元素的精细程度（higer specificity)&lt;/li&gt;
  &lt;li&gt;顺序： 样式定义顺序 (later in source order)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;origin&quot;&gt;1.origin&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;用户设置的!important样式&lt;/li&gt;
  &lt;li&gt;用户设置的样式&lt;/li&gt;
  &lt;li&gt;浏览器默认样式&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;inline-scope&quot;&gt;2.inline scope&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a style='color:red;'&amp;gt;Link&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;注意,加了important的inline style无人能压制&lt;/p&gt;

&lt;h3 id=&quot;selector-specificity&quot;&gt;3.selector specificity&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;规则: 更多的ids &amp;gt; 更多的classes &amp;gt; 更多的tags&lt;/li&gt;
  &lt;li&gt;每一个元素的选择器都可以写成这样[id数量，class数量，tags数量]&lt;/li&gt;
  &lt;li&gt;当你给元素一个id时，如何覆盖这个id的样式:
    &lt;ul&gt;
      &lt;li&gt;新样式加入important&lt;/li&gt;
      &lt;li&gt;新样式加上id和class&lt;/li&gt;
      &lt;li&gt;原样式的id降级为class&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section&quot;&gt;4.顺序这个就不用说了吧,后来者居上&lt;/h3&gt;

&lt;h3 id=&quot;section-1&quot;&gt;5.一点来自作者的建议&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;不要用id, 很难覆盖&lt;/li&gt;
  &lt;li&gt;不要用important, 很难覆盖&lt;/li&gt;
  &lt;li&gt;如果你在写一个库给别人用的话，不要用inline style, 否则用你库的人根本没法覆盖这个样式
 
 &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 17 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2017/09/17/%E6%9C%AC%E5%91%A8%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://dachicj.com/2017/09/17/%E6%9C%AC%E5%91%A8%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>本周JS学习笔记</title>
        <description>&lt;h3 id=&quot;yon-dont-know-jstype--grammer-chapter-01&quot;&gt;学习材料： Yon don’t know JS(Type &amp;amp; Grammer) Chapter 01&lt;/h3&gt;

&lt;h2 id=&quot;section&quot;&gt;什么是类型&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;An intrinsic, built-in set of characteristics that uniquely identifies the behavior of a particular value and distinguishes it from other values, both to the engine and to the developer.(对JS引擎和开发者而言的一套拥有内置独特特性和行为的特殊值，并与其他值相区别)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-1&quot;&gt;关键字&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;对JS引擎和开发者：引擎和开发者在处理不同类型时都需要不同的方式。&lt;/li&gt;
  &lt;li&gt;独特特性和行为: 每种类型的值有自己的特性和行为。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;js&quot;&gt;JS内置类型&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;null&lt;/li&gt;
  &lt;li&gt;undefined&lt;/li&gt;
  &lt;li&gt;boolean&lt;/li&gt;
  &lt;li&gt;number&lt;/li&gt;
  &lt;li&gt;string&lt;/li&gt;
  &lt;li&gt;object&lt;/li&gt;
  &lt;li&gt;symbol(ES6新增)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//try this&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//会显示true,但是是不正确的，这个是历史遗留问题&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;function&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//true, 但是function并不是单独的类型，它是callable object, object的一种子类型&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;更安全的检查变量方式&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//假设你的代码通过某个全局变量DEBUG来检查运行环境&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//会throw ReferenceError&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'undefined'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//更安全&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//使用typeof来查看某功能是否存在&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomethingCool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;helper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FeatureXYZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;FeatureXYZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;values-as-types&quot;&gt;Values as Types&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;在JS中，变量不拥有类型，但是values(值)拥有类型，变量可以绑定任意类型&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;coercion-&quot;&gt;Coercion 类型转换&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;类型转换有时是显式的，可读的，有的时候会在不经意间发生。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://dachicj.com/2017/09/10/%E6%9C%AC%E5%91%A8JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://dachicj.com/2017/09/10/%E6%9C%AC%E5%91%A8JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
      </item>
    
  </channel>
</rss>
