<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dachi&#39;s Blog 达迟的博客</title>
    <description>Dachi&#39;s Personal Blog.
</description>
    <link>http://dachicj.com/</link>
    <atom:link href="http://dachicj.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 30 Jan 2016 23:27:24 -0600</pubDate>
    <lastBuildDate>Sat, 30 Jan 2016 23:27:24 -0600</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Artificial Intelligence Search Algorithms (Draft)</title>
        <description>&lt;!--Custome style--&gt;
&lt;style&gt;
    body{
    	width:960px;
    	margin:10px auto;
    }
    circle{
      fill:white;
      stroke:steelblue;  
      stroke-width:2px;
    }
    line{
      stroke:grey;
      stroke-width:3px;
    }
    .incRect{
    	stroke:grey;
    	shape-rendering:crispEdges;
    }
    #incMatx text{
    	text-anchor:middle;
    	cursor:default;
    }
    #treesvg g text:hover, #treesvg g circle:hover{
    	cursor:pointer;
    }
    #navdiv{
    	background:#555;
    }
    #treesvg{
    	border:1px solid grey;
    }
    #labelpos{
    	color:white;
    }
    #navdiv button, #navdiv textarea{
    	vertical-align:middle;
    }
    #g_labels text{
    	text-anchor:middle;
    }
    #g_elabels text{
    	text-anchor:middle;
    	fill:red;
    	font-weight:bold;
    }
&lt;/style&gt;

&lt;!--Contents--&gt;
&lt;div id=&quot;content-wrapper&quot;&gt;
&lt;h4&gt;I am taking a artificial intelligence class for this quarter. It&#39;s so much fun and challenging. I wanted to take some notes on what I am learning.&lt;/h4&gt;

&lt;h4&gt;I will go through several things in this post:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;h5&gt;What is a search algorithm in A.I context?&lt;/h5&gt;&lt;/li&gt;
  &lt;li&gt;&lt;h5&gt;What kind of problem does search algorithms solve?&lt;/h5&gt;&lt;/li&gt;
  &lt;li&gt;&lt;h5&gt;What are most widely used search algorithms and how to implement them.&lt;/h5&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Algorithm concepts and implementations&lt;/h4&gt;
&lt;ol&gt;
    &lt;li&gt;DFS&lt;/li&gt;
    &lt;li&gt;BFS&lt;/li&gt;
    &lt;li&gt;Iterative Deepening&lt;/li&gt;
    &lt;li&gt;Uniform Cost&lt;/li&gt;
    &lt;li&gt;Best First Search&lt;/li&gt;
    &lt;li&gt;A* Algorithms with different heuristics functions&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;

&lt;!--Additional javascript--&gt;
&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
function tree(){
	var svgW=958, svgH =460, vRad=12, tree={cx:300, cy:30, w:40, h:70};
	tree.vis={v:0, l:&#39;?&#39;, p:{x:tree.cx, y:tree.cy},c:[]};	
	tree.size=1;
	tree.glabels =[];
	tree.incMatx =[];
	tree.incX=500, tree.incY=30, tree.incS=20;
	
	tree.getVertices =  function(){
		var v =[];
		function getVertices(t,f){	
			v.push({v:t.v, l:t.l, p:t.p, f:f});	
			t.c.forEach(function(d){ return getVertices(d,{v:t.v, p:t.p}); });
		}
		getVertices(tree.vis,{});
		return v.sort(function(a,b){ return a.v - b.v;});
	}
	
	tree.getEdges =  function(){
		var e =[];
		function getEdges(_){
			_.c.forEach(function(d){ e.push({v1:_.v, l1:_.l, p1:_.p, v2:d.v, l2:d.l, p2:d.p});});
			_.c.forEach(getEdges);
		}
		getEdges(tree.vis);
		return e.sort(function(a,b){ return a.v2 - b.v2;});	
	}
	
	tree.addLeaf = function(_){
		function addLeaf(t){
			if(t.v==_){ t.c.push({v:tree.size++, l:&#39;?&#39;, p:{},c:[]}); return; }
			t.c.forEach(addLeaf);
		}
		addLeaf(tree.vis);
		reposition(tree.vis);
		if(tree.glabels.length != 0){
			tree.glabels =[]
			relabel(
				{
					lbl:d3.range(0, tree.size).map(function(d){ return &#39;?&#39;;}), 
					incMatx:d3.range(0,tree.size-1).map(function(){ return 0;})
				});
			d3.select(&quot;#labelnav&quot;).style(&#39;visibility&#39;,&#39;hidden&#39;);
		}
		else tree.incMatx = d3.range(0,tree.size-1).map(function(){ return 0;});
		redraw();
	}
	
	tree.gracefulLabels = function(){
		tree.glabels =[], v = tree.getVertices();
		var vlbls =[], elbls=[];
		gracefulLbl = function(c){
			if(c == tree.size) { 
				var lbl = {lbl:vlbls.map(function(_){return _;}) }; 
				relabel(lbl);
				updateIncMatx();
				var incMatx = tree.incMatx.map(function(_){ return _; });
				if( (tree.incMatx[0] &amp; 2)&gt;&gt; 1 ==1 &amp;&amp; tree.glabels.every(function(d){ return d.incMatx.toString() != incMatx.toString(); })){
					lbl.incMatx = incMatx;
					tree.glabels.push(lbl); 
				}
				return; 
			}
			d3.range(0, tree.size)
				.filter(function(d){ return (vlbls.indexOf(d) ==-1) &amp;&amp;(elbls.indexOf(Math.abs(vlbls[v[c].f.v] - d)) == -1);})
				.forEach(function(d){  
					vlbls[c]=d; 
					elbls[c]=Math.abs(vlbls[v[c].f.v] - d); 
					gracefulLbl(c+1); 
					delete vlbls[c]; 		
					delete elbls[c]; 				
				});			
		}
		d3.range(0, tree.size).forEach(function(d){ vlbls =[d]; elbls=[]; gracefulLbl(1); });
		tree.showLabel(1);
		d3.select(&quot;#labelpos&quot;).text(tree.currLbl+&#39;/&#39;+tree.glabels.length);
		d3.select(&quot;#labelnav&quot;).style(&#39;visibility&#39;,&#39;visible&#39;);
	}
	
	updateIncMatx = function(){
		var n = tree.size-1;
		tree.incMatx = d3.range(0,tree.size-1).map(function(){return 0;});
		updateIncMatxl = function(t){
			t.c.forEach(function(c){
				t.l &lt; c.l ? tree.incMatx[t.l]= tree.incMatx[t.l] | (1&lt;&lt;(n-c.l)) : tree.incMatx[c.l]= tree.incMatx[c.l] | (1&lt;&lt;(n-t.l));
				updateIncMatxl(c);
			});
		}
		updateIncMatxl(tree.vis);		
	}
	
	getIncMatxRow = function(i){
		return d3.range(0,tree.size-1-i).map(function(d,j){ var n=tree.size-2-i-j; return (tree.incMatx[i] &amp; 1&lt;&lt;n)&gt;&gt;n; });
	}
	
	tree.showLabel = function(i){
		if(i &gt;tree.glabels.length || i &lt; 1){ alert(&#39;invalid label position&#39;); return; } 
		
		relabel(tree.glabels[i-1]);
		redraw();
		tree.currLbl = i;
		d3.select(&quot;#labelpos&quot;).text(tree.currLbl+&#39;/&#39;+tree.glabels.length);
	}
	
	relabel = function(lbl){
		function relbl(t){	t.l=lbl.lbl[t.v];	t.c.forEach(relbl);		}
		relbl(tree.vis);
		tree.incMatx = lbl.incMatx;
	}
	
	redraw = function(){
		var edges = d3.select(&quot;#g_lines&quot;).selectAll(&#39;line&#39;).data(tree.getEdges());
		
		edges.transition().duration(500)
			.attr(&#39;x1&#39;,function(d){ return d.p1.x;}).attr(&#39;y1&#39;,function(d){ return d.p1.y;})
			.attr(&#39;x2&#39;,function(d){ return d.p2.x;}).attr(&#39;y2&#39;,function(d){ return d.p2.y;})
	
		edges.enter().append(&#39;line&#39;)
			.attr(&#39;x1&#39;,function(d){ return d.p1.x;}).attr(&#39;y1&#39;,function(d){ return d.p1.y;})
			.attr(&#39;x2&#39;,function(d){ return d.p1.x;}).attr(&#39;y2&#39;,function(d){ return d.p1.y;})
			.transition().duration(500)
			.attr(&#39;x2&#39;,function(d){ return d.p2.x;}).attr(&#39;y2&#39;,function(d){ return d.p2.y;});
			
		var circles = d3.select(&quot;#g_circles&quot;).selectAll(&#39;circle&#39;).data(tree.getVertices());

		circles.transition().duration(500).attr(&#39;cx&#39;,function(d){ return d.p.x;}).attr(&#39;cy&#39;,function(d){ return d.p.y;});
		
		circles.enter().append(&#39;circle&#39;).attr(&#39;cx&#39;,function(d){ return d.f.p.x;}).attr(&#39;cy&#39;,function(d){ return d.f.p.y;}).attr(&#39;r&#39;,vRad)
			.on(&#39;click&#39;,function(d){return tree.addLeaf(d.v);})
			.transition().duration(500).attr(&#39;cx&#39;,function(d){ return d.p.x;}).attr(&#39;cy&#39;,function(d){ return d.p.y;});
			
		var labels = d3.select(&quot;#g_labels&quot;).selectAll(&#39;text&#39;).data(tree.getVertices());
		
		labels.text(function(d){return d.l;}).transition().duration(500)
			.attr(&#39;x&#39;,function(d){ return d.p.x;}).attr(&#39;y&#39;,function(d){ return d.p.y+5;});
			
		labels.enter().append(&#39;text&#39;).attr(&#39;x&#39;,function(d){ return d.f.p.x;}).attr(&#39;y&#39;,function(d){ return d.f.p.y+5;})
			.text(function(d){return d.l;}).on(&#39;click&#39;,function(d){return tree.addLeaf(d.v);})
			.transition().duration(500)
			.attr(&#39;x&#39;,function(d){ return d.p.x;}).attr(&#39;y&#39;,function(d){ return d.p.y+5;});		
			
		var elabels = d3.select(&quot;#g_elabels&quot;).selectAll(&#39;text&#39;).data(tree.getEdges());
					
		elabels
			.attr(&#39;x&#39;,function(d){ return (d.p1.x+d.p2.x)/2+(d.p1.x &lt; d.p2.x? 8: -8);}).attr(&#39;y&#39;,function(d){ return (d.p1.y+d.p2.y)/2;})
			.text(function(d){return tree.glabels.length==0? &#39;&#39;: Math.abs(d.l1 -d.l2);});	
			
		elabels.enter().append(&#39;text&#39;)
			.attr(&#39;x&#39;,function(d){ return (d.p1.x+d.p2.x)/2+(d.p1.x &lt; d.p2.x? 8: -8);}).attr(&#39;y&#39;,function(d){ return (d.p1.y+d.p2.y)/2;})
			.text(function(d){return tree.glabels.length==0? &#39;&#39;: Math.abs(d.l1 -d.l2);});	
			
		
		d3.select(&#39;#incMatx&#39;).selectAll(&quot;.incrow&quot;).data(tree.incMatx)
			.enter().append(&#39;g&#39;).attr(&#39;class&#39;,&#39;incrow&#39;);
			
		d3.select(&#39;#incMatx&#39;).selectAll(&quot;.incrow&quot;).selectAll(&#39;.incRect&#39;)
			.data(function(d,i){ return getIncMatxRow(i).map(function(v,j){return {y:i, x:j, f:v};})})
			.enter().append(&#39;rect&#39;).attr(&#39;class&#39;,&#39;incRect&#39;);
			
		d3.select(&#39;#incMatx&#39;).selectAll(&#39;.incRect&#39;)
			.attr(&#39;x&#39;,function(d,i){ return (d.x+d.y)*tree.incS;}).attr(&#39;y&#39;,function(d,i){ return d.y*tree.incS;})
			.attr(&#39;width&#39;,function(){ return tree.incS;}).attr(&#39;height&#39;,function(){ return tree.incS;})
			.attr(&#39;fill&#39;,function(d){ return d.f == 1? &#39;black&#39;:&#39;white&#39;});
			
		d3.select(&quot;#incMatx&quot;).selectAll(&#39;.incrowlabel&#39;).data(d3.range(0,tree.size)).enter()
			.append(&#39;text&#39;).attr(&#39;class&#39;,&#39;incrowlabel&#39;);
			
		d3.select(&quot;#incMatx&quot;).selectAll(&#39;.incrowlabel&#39;).text(function(d){ return d;})
			.attr(&#39;x&#39;,function(d,i){ return (i-0.5)*tree.incS}).attr(&#39;y&#39;,function(d,i){ return (i+0.8)*tree.incS});
	}
	
	getLeafCount = function(_){
		if(_.c.length ==0) return 1;
		else return _.c.map(getLeafCount).reduce(function(a,b){ return a+b;});
	}
	
	reposition = function(v){
		var lC = getLeafCount(v), left=v.p.x - tree.w*(lC-1)/2;
		v.c.forEach(function(d){
			var w =tree.w*getLeafCount(d); 
			left+=w; 
			d.p = {x:left-(w+tree.w)/2, y:v.p.y+tree.h};
			reposition(d);
		});		
	}	
	
	initialize = function(){
		d3.select(&quot;body&quot;).append(&quot;div&quot;).attr(&#39;id&#39;,&#39;navdiv&#39;);
		
		d3.select(&quot;#navdiv&quot;).append(&quot;button&quot;).attr(&#39;type&#39;,&#39;button&#39;).text(&#39;Generate labels&#39;)
			.on(&#39;click&#39;,function(d){return tree.gracefulLabels();});
		
		d3.select(&quot;#navdiv&quot;).append(&quot;nav&quot;).attr(&#39;id&#39;,&#39;labelnav&#39;).style(&#39;display&#39;,&#39;inline-block&#39;).style(&#39;visibility&#39;,&#39;hidden&#39;);
		
		d3.select(&quot;#labelnav&quot;).append(&quot;button&quot;).attr(&#39;type&#39;,&#39;button&#39;).text(&#39;&lt;&#39;).attr(&#39;id&#39;,&#39;prevlabel&#39;)
			.on(&#39;click&#39;,function(d){return tree.showLabel(tree.currLbl == 1? tree.glabels.length: tree.currLbl-1);});
			
		d3.select(&quot;#labelnav&quot;).append(&quot;text&quot;).text(&#39;&#39;).attr(&#39;id&#39;,&#39;labelpos&#39;);

		d3.select(&quot;#labelnav&quot;).append(&quot;button&quot;).attr(&#39;type&#39;,&#39;button&#39;).text(&#39;&gt;&#39;).attr(&#39;id&#39;,&#39;nextlabel&#39;)
			.on(&#39;click&#39;,function(){return tree.showLabel(tree.currLbl == tree.glabels.length? 1: tree.currLbl+1);});			
						
		d3.select(&quot;body&quot;).append(&quot;svg&quot;).attr(&quot;width&quot;, svgW).attr(&quot;height&quot;, svgH).attr(&#39;id&#39;,&#39;treesvg&#39;);

		d3.select(&quot;#treesvg&quot;).append(&#39;g&#39;).attr(&#39;id&#39;,&#39;g_lines&#39;).selectAll(&#39;line&#39;).data(tree.getEdges()).enter().append(&#39;line&#39;)
			.attr(&#39;x1&#39;,function(d){ return d.p1.x;}).attr(&#39;y1&#39;,function(d){ return d.p1.y;})
			.attr(&#39;x2&#39;,function(d){ return d.p2.x;}).attr(&#39;y2&#39;,function(d){ return d.p2.y;});

		d3.select(&quot;#treesvg&quot;).append(&#39;g&#39;).attr(&#39;id&#39;,&#39;g_circles&#39;).selectAll(&#39;circle&#39;).data(tree.getVertices()).enter()
			.append(&#39;circle&#39;).attr(&#39;cx&#39;,function(d){ return d.p.x;}).attr(&#39;cy&#39;,function(d){ return d.p.y;}).attr(&#39;r&#39;,vRad)
			.on(&#39;click&#39;,function(d){return tree.addLeaf(d.v);});
			
		d3.select(&quot;#treesvg&quot;).append(&#39;g&#39;).attr(&#39;id&#39;,&#39;g_labels&#39;).selectAll(&#39;text&#39;).data(tree.getVertices()).enter().append(&#39;text&#39;)
			.attr(&#39;x&#39;,function(d){ return d.p.x;}).attr(&#39;y&#39;,function(d){ return d.p.y+5;}).text(function(d){return d.l;})
			.on(&#39;click&#39;,function(d){return tree.addLeaf(d.v);});	
			
		d3.select(&quot;#treesvg&quot;).append(&#39;g&#39;).attr(&#39;id&#39;,&#39;g_elabels&#39;).selectAll(&#39;text&#39;).data(tree.getEdges()).enter().append(&#39;text&#39;)
			.attr(&#39;x&#39;,function(d){ return (d.p1.x+d.p2.x)/2+(d.p1.x &lt; d.p2.x? 8: -8);}).attr(&#39;y&#39;,function(d){ return (d.p1.y+d.p2.y)/2;})
			.text(function(d){return tree.glabels.length==0? &#39;&#39;: Math.abs(d.l1 -d.l2);});	
			
		d3.select(&quot;body&quot;).select(&quot;svg&quot;).append(&#39;g&#39;).attr(&#39;transform&#39;,function(){ return &#39;translate(&#39;+tree.incX+&#39;,&#39;+tree.incY+&#39;)&#39;;})
			.attr(&#39;id&#39;,&#39;incMatx&#39;).selectAll(&#39;.incrow&#39;)
			.data(tree.incMatx.map(function(d,i){ return {i:i, r:d};})).enter().append(&#39;g&#39;).attr(&#39;class&#39;,&#39;incrow&#39;);

		d3.select(&quot;#incMatx&quot;).selectAll(&#39;.incrowlabel&#39;).data(d3.range(0,tree.size)).enter()
			.append(&#39;text&#39;).attr(&#39;class&#39;,&#39;incrowlabel&#39;).text(function(d){ return d;})
			.attr(&#39;x&#39;,function(d,i){ return (i-0.5)*tree.incS}).attr(&#39;y&#39;,function(d,i){ return (i+.8)*tree.incS});
		
		tree.addLeaf(0);
		tree.addLeaf(0);
	}
	initialize();

	return tree;
}
//var tree= tree();
&lt;/script&gt;

</description>
        <pubDate>Sat, 30 Jan 2016 00:00:00 -0600</pubDate>
        <link>http://dachicj.com/comptuer/science/-/a.i/2016/01/30/Artificial-Intelligence-Search-Algorithms.html</link>
        <guid isPermaLink="true">http://dachicj.com/comptuer/science/-/a.i/2016/01/30/Artificial-Intelligence-Search-Algorithms.html</guid>
        
        
        <category>comptuer</category>
        
        <category>science</category>
        
        <category>-</category>
        
        <category>a.i</category>
        
      </item>
    
      <item>
        <title>准备技术面试的心得</title>
        <description>&lt;p&gt;笔者最近刚刚经历了一次谷歌的电话面试，遗憾的是笔者并没有获得onsite面试的机会，但是我还是想把准备面试中的心得体会和大家分享，希望为将来会准备技术面试的朋友提供一些帮助。&lt;/p&gt;

&lt;p&gt;技术面试中包含的种类可能千差万别，让人准备起来无所适从，但是这些题目大致可以规约于以下几个大类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;数据结构与算法:&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;
这个是各种技术公司面试主要考察的题目类型，即使是在数据结构／算法这一大类里，常见的数据结构／算法题目类型包括:&lt;/p&gt;

    &lt;p&gt;1.比特操作: 可能会考察二进制数字间的运算，包括并’|’,或‘&amp;amp;’以及异或’^’,非‘~’,经典的题目有数出一个整数的二进制形式里1的个数&lt;br /&gt;
  2.数据类型: 数字(数论：比如n以内的质数数量),字符(字符串的搜索)&lt;br /&gt;
  3.数据结构: 算法题中的重中之中，熟悉各种线性结构(数组，链表），哈希表，树结构（二叉树，红黑数，AVL),图论的实现以及种种算法.&lt;br /&gt;
  4.算法设计：枚举，迭代，分治，动态规划，贪心算法.&lt;br /&gt;
  5.程序设计: 例如实现一个迭代器&lt;br /&gt;
&lt;br /&gt;  	
  以上的五类题目可以用一条逻辑线串联起来，便于理解之间的层次关系:&lt;br /&gt;  &lt;br /&gt;
&lt;strong&gt;比特(01)=通过编码成为了=&amp;gt;数据类型(int, string) =通过组织成为了=&amp;gt;数据结构 =加上了设计成为了=&amp;gt;程序。&lt;/strong&gt;
&lt;br /&gt;  &lt;br /&gt;
  当复习数据结构与算法的时候最好同时 &lt;strong&gt;学习数据结构／算法的理论与练习算法题&lt;/strong&gt;. 对于准备面试时使用LeetCode这样的online judge是必不可少的，同时你也有很大几率碰到从来没出现过的题目，所以对于基础理论更好的理解可以帮你更快识别新题目在考察什么数据类型和算法。 &lt;br /&gt;
  &lt;br /&gt;
  &lt;em&gt;推举学习材料:&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
  1.&lt;a href=&quot;http://www.amazon.com/Algorithms-4th-Edition-Robert-Sedgewick/dp/032157351X&quot;&gt;Algorithm 4th Ed&lt;/a&gt;&lt;br /&gt;
  2.&lt;a href=&quot;http://www.amazon.com/gp/product/0262033844/ref=pd_lpo_sbs_dp_ss_1?pf_rd_p=1944687762&amp;amp;pf_rd_s=lpo-top-stripe-1&amp;amp;pf_rd_t=201&amp;amp;pf_rd_i=032157351X&amp;amp;pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_r=0JG05DDS4Z9GBQD0JX5A&quot;&gt;Introduction to algorithm&lt;/a&gt;&lt;br /&gt;
  3.&lt;a href=&quot;http://www.amazon.com/Cracking-Coding-Interview-6th-Programming/dp/0984782850/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1445800204&amp;amp;sr=1-1&amp;amp;keywords=CC150&quot;&gt;CC150&lt;/a&gt;&lt;br /&gt;
  4.&lt;a href=&quot;http://www.amazon.com/Cracking-Coding-Interview-6th-Programming/dp/0984782850/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1445800204&amp;amp;sr=1-1&amp;amp;keywords=CC150&quot;&gt;LeetCode&lt;/a&gt;&lt;br /&gt;
  5.这个北大在&lt;a href=&quot;https://www.coursera.org/learn/shuju-jiegou-suanfa&quot;&gt;Coursera&lt;/a&gt;上的公开课我也觉得很不错.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;写代码&lt;/strong&gt;:&lt;br /&gt;	    &lt;br /&gt;
  在面试的时候，（谷歌电面的时候是在Google Doc上写代码，onsite是在白板上），你需要不依赖IDE来写代码，所以你必须熟练掌握你惯用语言的语法以及种种细节，练习的最好方式是先复习语法基础，然后用你的语言来实现种种数据结构与算法，尽量使用text editor来实现。对于Python爱好者我推荐这篇文章&lt;a href=&quot;http://docs.python-guide.org/en/latest/&quot;&gt;The Hitchhiker’s guide to python&lt;/a&gt;来提高Python的姿势水平。
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;操作系统&lt;/strong&gt;:&lt;br /&gt;&lt;br /&gt;
  一般情况下需要掌握操作系统的进程管理方面的知识（内存管理／文件系统的知识可酌情学习），掌握进程、线程、并发、并行、锁、死锁等概念。&lt;/p&gt;

    &lt;p&gt;推荐学习材料:&lt;br /&gt;
  1 &lt;a href=&quot;http://www.amazon.com/gp/product/0136006639?keywords=modern%20operating%20system&amp;amp;qid=1445800770&amp;amp;ref_=sr_1_2&amp;amp;sr=8-2&quot;&gt;Modern Opearting System&lt;/a&gt;&lt;br /&gt;
  2 &lt;a href=&quot;https://www.coursera.org/course/os&quot;&gt;另外一个Cousera上的北大关于操作系统的公开课，基于上面这本书为提纲&lt;/a&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;脚本／正则表达式&lt;/strong&gt;:&lt;br /&gt;&lt;br /&gt;
  笔者就被问了一道正则的题啊, 所以同学们你们也需要多少知道一点正则方面的知识啊, 最好平时多玩玩command line和正则相关的一些小工具(grep/sed/awk).推荐一本书，又讲了操作系统，又讲Shell scritping／正则等相关知识：&lt;a href=&quot;http://www.amazon.com/gp/product/1593275676?keywords=how%20linux%20works&amp;amp;qid=1445824874&amp;amp;ref_=sr_1_1&amp;amp;sr=8-1&quot;&gt;How Linux Works&lt;/a&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;系统设计&lt;/strong&gt;:&lt;br /&gt;&lt;br /&gt;
  阅读谷歌的&lt;a href=&quot;http://research.google.com/archive/mapreduce.html&quot;&gt;mapreduce&lt;/a&gt;/&lt;a href=&quot;http://research.google.com/archive/bigtable.html&quot;&gt;big table&lt;/a&gt; 论文，延伸阅读里的第二个链接中有丰富优秀的资源，切克闹。&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;离散数学&lt;/strong&gt;:&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;一些需要复习的概念包括但不限于：&lt;br /&gt;
  1.递归证明&lt;br /&gt;
  2.布尔代数&lt;br /&gt;
  3.排列组合&lt;br /&gt;
  4.概率论&lt;/p&gt;

    &lt;p&gt;这个&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-fall-2010/index.htm?utm_source=OCWDept&amp;amp;utm_medium=CarouselSm&amp;amp;utm_campaign=FeaturedCourse&quot;&gt;MIT的离散数学公开课&lt;/a&gt; 非常好，其中有一趟跟图论有关的课更是非常“内涵”，去看就懂了。 &lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;延伸阅读:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sites.google.com/site/steveyegge2/five-essential-phone-screen-questions&quot;&gt;The Five Essential Phone-Screen Questions&lt;/a&gt; 著名程序员加喷神Steve Yegge所写的电面五个经典题目&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/checkcheckzz/system-design-interview&quot;&gt;Good read on system desing interview&lt;/a&gt; 系统设计读物&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/DachiCoding/programming_practice/blob/master/python/sort.py&quot;&gt;我自己用Python实现各种排序算法的代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;祝所有在准备技术面试的同学同仁们取得好成绩，我继续刷题去了噢耶。&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://dachicj.com/career/development/2015/10/25/%E5%87%86%E5%A4%87%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%E7%9A%84%E5%BF%83%E5%BE%97.html</link>
        <guid isPermaLink="true">http://dachicj.com/career/development/2015/10/25/%E5%87%86%E5%A4%87%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%E7%9A%84%E5%BF%83%E5%BE%97.html</guid>
        
        
        <category>career</category>
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Notes on preapring technique interview</title>
        <description>&lt;p&gt;I recently had a phone screen interview with Google, unfortunately I was not able to move forward to an onsite interview, but I would love to share something about preparing a technique interview.&lt;/p&gt;

&lt;p&gt;Technique interview questions could have a great variety of different stuff, let me “hash” them into few categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Data Structure and Algorithm:&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;
This is where most of your interview questiones will come from, you have to spend a decent amount of time on it. Data structure and algorithm topics includes:&lt;/p&gt;

    &lt;p&gt;1.Bits manipulation: Bitwise opeartions&lt;br /&gt;
  2.Data type related: Math(number theory),String(String conversion, pattern matching)&lt;br /&gt;
  3.Data structure related: Linear DS(Array,LinkedList), Hahses, Trees and Graph.&lt;br /&gt;
  4.General algo design: Divide and conquer, Dynamic programming/Greedy algo.&lt;br /&gt;
  5.Design: e.g Implementing iteratro&lt;br /&gt;
&lt;br /&gt;  	
  There is a logic sequence might help you better connecting different topics above togather:&lt;br /&gt;  &lt;br /&gt;
&lt;strong&gt;Bit(01)=(Enconde)=&amp;gt;Data Type(int, string) =(Organize)=&amp;gt;Data Structure =(Design)=&amp;gt;Programs.&lt;/strong&gt;
&lt;br /&gt;  &lt;br /&gt;
  When reviewing DS/algorithm problems, it will be good to &lt;strong&gt;study fundamental theory and practice algorithm exercises&lt;/strong&gt; at the same time. You definitely want to use some OJ such as LeetCode but it is also necessary to review your algorithm textbook in case you run across some question that has never seen, so you still can recoginze what kind of problem it is in an instant.&lt;br /&gt;
  &lt;br /&gt;
  &lt;em&gt;Recommend study material:&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
  1.&lt;a href=&quot;http://www.amazon.com/Algorithms-4th-Edition-Robert-Sedgewick/dp/032157351X&quot;&gt;Algorithm 4th Ed&lt;/a&gt;&lt;br /&gt;
  2.&lt;a href=&quot;http://www.amazon.com/gp/product/0262033844/ref=pd_lpo_sbs_dp_ss_1?pf_rd_p=1944687762&amp;amp;pf_rd_s=lpo-top-stripe-1&amp;amp;pf_rd_t=201&amp;amp;pf_rd_i=032157351X&amp;amp;pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_r=0JG05DDS4Z9GBQD0JX5A&quot;&gt;Intro to algorithm&lt;/a&gt;&lt;br /&gt;
  3.&lt;a href=&quot;http://www.amazon.com/Cracking-Coding-Interview-6th-Programming/dp/0984782850/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1445800204&amp;amp;sr=1-1&amp;amp;keywords=CC150&quot;&gt;CC150&lt;/a&gt;&lt;br /&gt;
  4.&lt;a href=&quot;http://www.amazon.com/Cracking-Coding-Interview-6th-Programming/dp/0984782850/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1445800204&amp;amp;sr=1-1&amp;amp;keywords=CC150&quot;&gt;LeetCode&lt;/a&gt;&lt;br /&gt;
  5.I also found this data strucutre open course on &lt;a href=&quot;https://www.coursera.org/learn/shuju-jiegou-suanfa&quot;&gt;Coursera&lt;/a&gt; really helpful.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Coding&lt;/strong&gt;:&lt;br /&gt;	    &lt;br /&gt;
  Know detail stuff about your favoriate language, try to pracitce them with implemnting different data structures and algorihtms, for python lover I recommend this &lt;a href=&quot;http://docs.python-guide.org/en/latest/&quot;&gt;The Hitchhiker’s guide to python&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Opearting System knowledeges&lt;/strong&gt;:&lt;br /&gt;&lt;br /&gt;
  You might need to familar yourself with process manageemnt, mutex, semaphore, lock(deadlock) and parallel computing concepts.&lt;/p&gt;

    &lt;p&gt;Recommend material:&lt;br /&gt;
  1 &lt;a href=&quot;http://www.amazon.com/gp/product/0136006639?keywords=modern%20operating%20system&amp;amp;qid=1445800770&amp;amp;ref_=sr_1_2&amp;amp;sr=8-2&quot;&gt;Modern Opearting System&lt;/a&gt;&lt;br /&gt;
  2 &lt;a href=&quot;https://www.coursera.org/course/os&quot;&gt;A coursera open course from PKU about OS&lt;/a&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Shell scripting/Regex&lt;/strong&gt;:&lt;br /&gt;&lt;br /&gt;
  I was given a regex problem at the interview, so you should expect yourself will run across it too, try to play with command line and regex (grep/sed/awk) a little bit. One of my favorite book on the topic is &lt;a href=&quot;http://www.amazon.com/gp/product/1593275676?keywords=how%20linux%20works&amp;amp;qid=1445824874&amp;amp;ref_=sr_1_1&amp;amp;sr=8-1&quot;&gt;How Linux Works&lt;/a&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;System Design&lt;/strong&gt;:&lt;br /&gt;&lt;br /&gt;
  Read google &lt;a href=&quot;http://research.google.com/archive/mapreduce.html&quot;&gt;mapreduce&lt;/a&gt;/&lt;a href=&quot;http://research.google.com/archive/bigtable.html&quot;&gt;big table&lt;/a&gt; papers and stuff recommend in further reading.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Discrete mathematics&lt;/strong&gt;:&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;You might want to take sometime to review:&lt;br /&gt;
  1.Induction and recursive&lt;br /&gt;
  2.Boolean algebra&lt;br /&gt;
  3.Couting&lt;br /&gt;
  4.Probablity&lt;/p&gt;

    &lt;p&gt;This &lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-fall-2010/index.htm?utm_source=OCWDept&amp;amp;utm_medium=CarouselSm&amp;amp;utm_campaign=FeaturedCourse&quot;&gt;MIT Open Course of discrete mathematic&lt;/a&gt; is a great stuff to check out. 
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further reading:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sites.google.com/site/steveyegge2/five-essential-phone-screen-questions&quot;&gt;The Five Essential Phone-Screen Questions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/checkcheckzz/system-design-interview&quot;&gt;Good read on system desing interview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 25 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://dachicj.com/job/searching/2015/10/25/Notes-on-preparing-technique-interview.html</link>
        <guid isPermaLink="true">http://dachicj.com/job/searching/2015/10/25/Notes-on-preparing-technique-interview.html</guid>
        
        
        <category>job</category>
        
        <category>searching</category>
        
      </item>
    
      <item>
        <title>Matching Problem</title>
        <description>&lt;p&gt;First of all, my deep apologies for not updating about weeks. My excuses are:
1.I spent a week in Orlando for vacation.
2.After came back from Orlando, my neck and back hurt so much thus kept me away from laptops.&lt;/p&gt;

&lt;p&gt;Today’s study material: MIT OCW Mathematic For Computer Science Lecture 6 Graph Theory
***Please beware the below text might cover gender-related contents&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question: on average who has more opposite-gender partners in United States: men or women?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Below are two results from University of Chicago and ABC news who conducted surveys on random people&lt;/p&gt;

&lt;p&gt;Answer A(From U Chicago): Men have 78% more of opposite-gender partners than women
Answer B(From ABC News ): Men have 233% more of opposite-gender partners than women.&lt;/p&gt;

&lt;p&gt;Don’t get excited or upset by the numbers above, because we can use basic graph theory to show what the reality is.&lt;/p&gt;

&lt;p&gt;First let’s introduce some basic definition of graph theory:
&lt;em&gt;Vertex&lt;/em&gt;: or dot or node, in this example is a man or a woman.
&lt;em&gt;Edge&lt;/em&gt;: or line, in this example a line represents one pair of man and woman who have sexual relationship.
&lt;em&gt;Degree&lt;/em&gt;: number of edges joined by one vertex, in this example if Mr.X are connected with 3 different women in total, his degree is 3, and I don’t think I have to explain what does it mean in this example :)&lt;/p&gt;

&lt;p&gt;So we can come up with one particular graph(Bipartite graph) fits this example really well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dachicj.com/wp-content/uploads/2014/08/Screen-Shot-2014-08-23-at-4.22.36-PM.png&quot;&gt;&lt;img src=&quot;http://dachicj.com/wp-content/uploads/2014/08/Screen-Shot-2014-08-23-at-4.22.36-PM-289x300.png&quot; alt=&quot;Screen Shot 2014-08-23 at 4.22.36 PM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Men are on the left of the above chart, and women are on the right. Each node represents one man or woman, and the edge(line)represents they are having *** relationship.&lt;/p&gt;

&lt;p&gt;Let’s back to the ratio of men to women opposite-gender partners,&lt;/p&gt;

&lt;p&gt;so the average number of opposite-gender-partners on men would be the sum of degrees on the left side divide by the number of men population, same applies for the women.&lt;/p&gt;

&lt;p&gt;Guess what, the sum of degree on the men and women are equal, which is obvious. So the ratio totally depends on the ratio between men and women population. And men’s population in U.S is about 147.6M and women’s is about 152.4M. Therefore the ratio should be 152.4/147.6- 100% = 3.25%. Based on the calculation men have 3.25% more opposite-gender partners than women.&lt;/p&gt;

&lt;p&gt;Computer science blows my mind.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
        <pubDate>Sat, 23 Aug 2014 16:33:20 -0500</pubDate>
        <link>http://dachicj.com/computer/science/2014/08/23/matching-problem.html</link>
        <guid isPermaLink="true">http://dachicj.com/computer/science/2014/08/23/matching-problem.html</guid>
        
        
        <category>computer</category>
        
        <category>science</category>
        
      </item>
    
      <item>
        <title>Turing&#39;s Code</title>
        <description>&lt;p&gt;Today I studied:&lt;/p&gt;

&lt;p&gt;MIT OCW Mathematic For Computer Science Text-note 1-4.3 Alan Turing:&lt;/p&gt;

&lt;p&gt;At the beginning, let’s look at a string of numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;           **50369825549820718594667857.**
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What the heck is that huh? Imagine it’s WWII now, and that is actually a piece of encrypted information which hidden the secret to defeat Nazi! World Peace depends on you!&lt;/p&gt;

&lt;p&gt;Ok so how do we decipher this piece of code? One equation will helpful:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;           **m* = m * k** 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;m is the original number representation of the word (A = 01, B = 02, … e.g Hello = 08 05 12 12 15), please note the number has to be a prime, if the original number is not a prime, we will append numbers to make it a prime.&lt;/p&gt;

&lt;p&gt;k is the secret key number shared only between sender and receiver ( a large prime)&lt;/p&gt;

&lt;p&gt;m* is the encrypted number.&lt;/p&gt;

&lt;p&gt;During the war time figuring out the key prime would take endless computations, so are the secrets all safe?&lt;/p&gt;

&lt;p&gt;Actually not, though computing or guessing the k is mission impossible, but if the Nazi get two message, they can use Euclid’s algorithm to figure out the great common divisor of m&lt;em&gt;1 and m&lt;/em&gt;2. the Nazi can keep calculating using “gcd(a,b) = gcd(b,rem(a,b))” until they get the k!&lt;/p&gt;

&lt;p&gt;Oops!&lt;/p&gt;

&lt;p&gt;(The hidden message is “victory” , 22 09 03 20 15 18 25 appending 13 to make it a prime, and key is 22801763489, so
m* = 2209032015182513 * 22801763489)&lt;/p&gt;

</description>
        <pubDate>Wed, 06 Aug 2014 11:02:33 -0500</pubDate>
        <link>http://dachicj.com/computer/science/2014/08/06/turings-code.html</link>
        <guid isPermaLink="true">http://dachicj.com/computer/science/2014/08/06/turings-code.html</guid>
        
        
        <category>computer</category>
        
        <category>science</category>
        
      </item>
    
      <item>
        <title>Strong Induction</title>
        <description>&lt;p&gt;What I’ve studied today:&lt;/p&gt;

&lt;p&gt;1.MIT OCW: Mathematics For Computer Science Lecture 3 Strong Induction.&lt;/p&gt;

&lt;p&gt;Ok, why we need to study induction?&lt;/p&gt;

&lt;p&gt;According to the textbook of this course:&lt;/p&gt;

&lt;p&gt;“One of the most important uses of induction in computer science involves proving that a program or process preserves
one or more desirable properties as it proceeds. A property that is preserved through a series of operations or steps 
is known as an invariant. “&lt;/p&gt;

&lt;p&gt;Have you ever play the 8 puzzle game? (In China we have a similar game named “Hua Rong Dao”, which have a better UI I guess.)
&lt;a href=&quot;http://dachicj.com/wp-content/uploads/2014/08/8_puzzle_goal_state_a.png&quot;&gt;&lt;img src=&quot;http://dachicj.com/wp-content/uploads/2014/08/8_puzzle_goal_state_a.png&quot; alt=&quot;8_puzzle_goal_state_a&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whether if you are a fan of this game, let’s try to figure out whether the chart on the left could reach to the right?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dachicj.com/wp-content/uploads/2014/08/Screen-Shot-2014-08-04-at-10.02.29-PM.png&quot;&gt;&lt;img src=&quot;http://dachicj.com/wp-content/uploads/2014/08/Screen-Shot-2014-08-04-at-10.02.29-PM-300x140.png&quot; alt=&quot;Screen Shot 2014-08-04 at 10.02.29 PM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The answer is no actually.&lt;/p&gt;

&lt;p&gt;Because in the situation above there only exist one set of inversion, but a row move(moving from left to right or vice versa)does not change the 
number of inversion, and a column move(change up and down)change even number of inversion. It is unreachable to make it right by the move allowed
in this game.&lt;/p&gt;

&lt;p&gt;Official proof goes here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dachicj.com/wp-content/uploads/2014/08/Screen-Shot-2014-08-04-at-10.08.19-PM.png&quot;&gt;&lt;img src=&quot;http://dachicj.com/wp-content/uploads/2014/08/Screen-Shot-2014-08-04-at-10.08.19-PM-300x135.png&quot; alt=&quot;Screen Shot 2014-08-04 at 10.08.19 PM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 04 Aug 2014 22:09:00 -0500</pubDate>
        <link>http://dachicj.com/computer/science/2014/08/04/strong-induction.html</link>
        <guid isPermaLink="true">http://dachicj.com/computer/science/2014/08/04/strong-induction.html</guid>
        
        
        <category>computer</category>
        
        <category>science</category>
        
      </item>
    
      <item>
        <title>Jugs Problem</title>
        <description>&lt;p&gt;What I’ve studied today:&lt;/p&gt;

&lt;p&gt;1.MIT OCW: Mathematics For Computer Science Lecture 4 Number Theory I&lt;/p&gt;

&lt;p&gt;Let’s watch a clip from “Die Hard 3” first.
&lt;a href=&quot;https://www.youtube.com/watch?v=BVtQNK_ZUJg&quot;&gt;Die Hard 3 Jugs Problem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My solution is: 
1.Fill the 3 gallon jug, and pour it into the 5 gallon jug, then we have (0,3) gallons in the 3g and 5g jugs
2.Fill the 3 gallon jug again , and pour the water into the 5 gallon jug until it is full, then we have (1,5) gallons.
3.Dump all the water in the 5 gallon jug and then pour the 1 gallon of water from the 3 gallon jug to 5 gallon (1,5) -&amp;gt; (1, 0) -&amp;gt; (0, 1)
4.Fill the 3 gallon jug and pour all the water into the 5 gallon jug (3,1) -&amp;gt; (0, 4).
5.Done&lt;/p&gt;

&lt;p&gt;Let’s look at the problem from a more abstract perspective, can we use a 3 gallon jug and 6 gallon jug to get 4 gallons of water? 
Maybe not, “suppose that we have water jugs with capacities a and b, the amount of water in each jugs is always a linear combination 
of a and b.”&lt;/p&gt;

&lt;p&gt;Below is the proof steps using induction from the MIT text-note.
[gallery ids=”37”]&lt;/p&gt;

&lt;p&gt;Ok, but why bother studying the number theory? because SECURITY matters! “Number theory underlies modern cryptography, which is what 
enable secure online communication.”&lt;/p&gt;

</description>
        <pubDate>Sun, 03 Aug 2014 15:21:37 -0500</pubDate>
        <link>http://dachicj.com/computer/science/2014/08/03/jugs-problem.html</link>
        <guid isPermaLink="true">http://dachicj.com/computer/science/2014/08/03/jugs-problem.html</guid>
        
        
        <category>computer</category>
        
        <category>science</category>
        
      </item>
    
      <item>
        <title>printf(&quot;Hello World!\n&quot;);</title>
        <description>&lt;h4 id=&quot;greetings&quot;&gt;Greetings!&lt;/h4&gt;

&lt;p&gt;Welcome to Dachi’s blog! A place that you can see my blogs, projects and learn more about me.&lt;/p&gt;

&lt;p&gt;There are some fun places that you can go to on this website :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hacks&lt;/strong&gt;: My programming projects, you can play with them and let me know how cool it is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Blog&lt;/strong&gt; : Stuff about studying computer science, programming, general technolgy and all kinds of brain hole output.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;About&lt;/strong&gt;: About who I was, who I am and who I am going to be. (Please do not use those information for social engineering!)&lt;/p&gt;

&lt;p&gt;Thanks for your visiting and I hope you will enjoy it.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br /&gt;
Dachi&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Aug 2014 09:51:42 -0500</pubDate>
        <link>http://dachicj.com/general/2014/08/02/hello-world.html</link>
        <guid isPermaLink="true">http://dachicj.com/general/2014/08/02/hello-world.html</guid>
        
        
        <category>general</category>
        
      </item>
    
  </channel>
</rss>
